//
// ManagerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ManagerAPI {
    /**
     Create new investment request
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAccountNewInvestmentRequestPost(authorization: String, request: NewInvestmentRequest? = nil, completion: @escaping ((_ data: UUID?,_ error: Error?) -> Void)) {
        apiManagerAccountNewInvestmentRequestPostWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create new investment request
     - POST /api/manager/account/newInvestmentRequest
     - examples: [{contentType=application/json, example="046b6c7f-0b8a-43b9-b35d-6489e6daee91"}]
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<UUID> 
     */
    open class func apiManagerAccountNewInvestmentRequestPostWithRequestBuilder(authorization: String, request: NewInvestmentRequest? = nil) -> RequestBuilder<UUID> {
        let path = "/api/manager/account/newInvestmentRequest"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UUID>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Confirm email after registration
     
     - parameter userId: (query)  (optional)
     - parameter code: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAuthConfirmEmailGet(userId: String? = nil, code: String? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerAuthConfirmEmailGetWithRequestBuilder(userId: userId, code: code).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Confirm email after registration
     - GET /api/manager/auth/confirmEmail
     
     - parameter userId: (query)  (optional)
     - parameter code: (query)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerAuthConfirmEmailGetWithRequestBuilder(userId: String? = nil, code: String? = nil) -> RequestBuilder<Void> {
        let path = "/api/manager/auth/confirmEmail"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userId": userId, 
            "code": code
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Authorize
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAuthSignInPost(model: LoginViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiManagerAuthSignInPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Authorize
     - POST /api/manager/auth/signIn
     - examples: [{contentType=application/json, example=""}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func apiManagerAuthSignInPostWithRequestBuilder(model: LoginViewModel? = nil) -> RequestBuilder<String> {
        let path = "/api/manager/auth/signIn"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Register new manager
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAuthSignUpPost(model: RegisterManagerViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerAuthSignUpPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Register new manager
     - POST /api/manager/auth/signUp
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerAuthSignUpPostWithRequestBuilder(model: RegisterManagerViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/manager/auth/signUp"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update auth token
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAuthUpdateTokenGet(authorization: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiManagerAuthUpdateTokenGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update auth token
     - GET /api/manager/auth/updateToken
     - examples: [{contentType=application/json, example=""}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<String> 
     */
    open class func apiManagerAuthUpdateTokenGetWithRequestBuilder(authorization: String) -> RequestBuilder<String> {
        let path = "/api/manager/auth/updateToken"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get all enabled trade servers
     
     - parameter filter: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerBrokersPost(filter: BrokersFilter? = nil, completion: @escaping ((_ data: BrokersViewModel?,_ error: Error?) -> Void)) {
        apiManagerBrokersPostWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get all enabled trade servers
     - POST /api/manager/brokers
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "brokers" : [ {
    "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "name" : "name",
    "host" : "host",
    "registrationDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Undefined",
    "broker" : {
      "name" : "name",
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "description" : "description",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }
  }, {
    "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "name" : "name",
    "host" : "host",
    "registrationDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Undefined",
    "broker" : {
      "name" : "name",
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "description" : "description",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }
  } ]
}}]
     
     - parameter filter: (body)  (optional)

     - returns: RequestBuilder<BrokersViewModel> 
     */
    open class func apiManagerBrokersPostWithRequestBuilder(filter: BrokersFilter? = nil) -> RequestBuilder<BrokersViewModel> {
        let path = "/api/manager/brokers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filter)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BrokersViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Close existing investment program
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentCloseGet(investmentProgramId: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerInvestmentCloseGetWithRequestBuilder(investmentProgramId: investmentProgramId, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Close existing investment program
     - GET /api/manager/investment/close
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerInvestmentCloseGetWithRequestBuilder(investmentProgramId: UUID, authorization: String) -> RequestBuilder<Void> {
        let path = "/api/manager/investment/close"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "investmentProgramId": investmentProgramId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get investment program with statistic by id
     
     - parameter investmentProgramId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentGet(investmentProgramId: UUID, completion: @escaping ((_ data: InvestmentProgramViewModel?,_ error: Error?) -> Void)) {
        apiManagerInvestmentGetWithRequestBuilder(investmentProgramId: investmentProgramId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get investment program with statistic by id
     - GET /api/manager/investment
     - examples: [{contentType=application/json, example={
  "statistic" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "currentBalance" : 0.8008281904610115,
    "profit" : 6.027456183070403
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "currentBalance" : 0.8008281904610115,
    "profit" : 6.027456183070403
  } ],
  "investmentProgram" : {
    "investment" : {
      "feeEntrance" : 7.061401241503109,
      "period" : 5,
      "feeManagement" : 2.3021358869347655,
      "totalProfit" : 7.386281948385884,
      "rating" : 2.027123023002322,
      "description" : "description",
      "dateFrom" : "2000-01-23T04:56:07.000+00:00",
      "investMinAmount" : 9.301444243932576,
      "ordersCount" : 4,
      "isEnabled" : true,
      "dateTo" : "2000-01-23T04:56:07.000+00:00",
      "logo" : "logo",
      "feeSuccess" : 5.637376656633329,
      "lastPeriod" : {
        "number" : 0,
        "investmentRequest" : [ {
          "date" : "2000-01-23T04:56:07.000+00:00",
          "amount" : 1.4658129805029452,
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "type" : "Invest",
          "status" : "New"
        }, {
          "date" : "2000-01-23T04:56:07.000+00:00",
          "amount" : 1.4658129805029452,
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "type" : "Invest",
          "status" : "New"
        } ],
        "dateTo" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "dateFrom" : "2000-01-23T04:56:07.000+00:00",
        "startBalance" : 6.027456183070403,
        "status" : "Planned"
      },
      "investMaxAmount" : 3.616076749251911,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "managerTokensId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "managerAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    },
    "account" : {
      "brokerTradeServer" : {
        "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "name" : "name",
        "host" : "host",
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "type" : "Undefined",
        "broker" : {
          "name" : "name",
          "registrationDate" : "2000-01-23T04:56:07.000+00:00",
          "description" : "description",
          "logo" : "logo",
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "ipfsHash" : "ipfsHash",
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "currency" : "currency",
      "isConfirmed" : true,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "login" : "login"
    },
    "token" : {
      "tokenAddress" : "tokenAddress",
      "tokenSymbol" : "tokenSymbol",
      "tokenName" : "tokenName",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }
  }
}}]
     
     - parameter investmentProgramId: (query)  

     - returns: RequestBuilder<InvestmentProgramViewModel> 
     */
    open class func apiManagerInvestmentGetWithRequestBuilder(investmentProgramId: UUID) -> RequestBuilder<InvestmentProgramViewModel> {
        let path = "/api/manager/investment"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "investmentProgramId": investmentProgramId
        ])
        

        let requestBuilder: RequestBuilder<InvestmentProgramViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get full profile
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerProfileFullGet(authorization: String, completion: @escaping ((_ data: ProfileFullViewModel?,_ error: Error?) -> Void)) {
        apiManagerProfileFullGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get full profile
     - GET /api/manager/profile/full
     - examples: [{contentType=application/json, example={
  "birthday" : "2000-01-23T04:56:07.000+00:00",
  "lastName" : "lastName",
  "country" : "country",
  "address" : "address",
  "gender" : true,
  "documentType" : "documentType",
  "city" : "city",
  "documentNumber" : "documentNumber",
  "avatar" : "avatar",
  "firstName" : "firstName",
  "balance" : 0.8008281904610115,
  "phone" : "phone",
  "middleName" : "middleName",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "email" : "email"
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProfileFullViewModel> 
     */
    open class func apiManagerProfileFullGetWithRequestBuilder(authorization: String) -> RequestBuilder<ProfileFullViewModel> {
        let path = "/api/manager/profile/full"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileFullViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get short profile
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerProfileGet(authorization: String, completion: @escaping ((_ data: ProfileShortViewModel?,_ error: Error?) -> Void)) {
        apiManagerProfileGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get short profile
     - GET /api/manager/profile
     - examples: [{contentType=application/json, example={
  "balance" : 0.8008281904610115,
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "email" : "email"
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProfileShortViewModel> 
     */
    open class func apiManagerProfileGetWithRequestBuilder(authorization: String) -> RequestBuilder<ProfileShortViewModel> {
        let path = "/api/manager/profile"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileShortViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Update profile
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerProfileUpdatePost(authorization: String, model: ProfileFullViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerProfileUpdatePostWithRequestBuilder(authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update profile
     - POST /api/manager/profile/update
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerProfileUpdatePostWithRequestBuilder(authorization: String, model: ProfileFullViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/manager/profile/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Deposit
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerWalletDepositPost(authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerWalletDepositPostWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Deposit
     - POST /api/manager/wallet/deposit
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerWalletDepositPostWithRequestBuilder(authorization: String) -> RequestBuilder<Void> {
        let path = "/api/manager/wallet/deposit"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get user wallet transactions
     
     - parameter authorization: (header) JWT access token 
     - parameter filter: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerWalletTransactionsPost(authorization: String, filter: TransactionsFilter? = nil, completion: @escaping ((_ data: WalletTransactionsViewModel?,_ error: Error?) -> Void)) {
        apiManagerWalletTransactionsPostWithRequestBuilder(authorization: authorization, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get user wallet transactions
     - POST /api/manager/wallet/transactions
     - examples: [{contentType=application/json, example={
  "total" : 6,
  "transactions" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 0.8008281904610115,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Deposit"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 0.8008281904610115,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Deposit"
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter filter: (body)  (optional)

     - returns: RequestBuilder<WalletTransactionsViewModel> 
     */
    open class func apiManagerWalletTransactionsPostWithRequestBuilder(authorization: String, filter: TransactionsFilter? = nil) -> RequestBuilder<WalletTransactionsViewModel> {
        let path = "/api/manager/wallet/transactions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filter)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WalletTransactionsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Withdraw
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerWalletWithdrawPost(authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerWalletWithdrawPostWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Withdraw
     - POST /api/manager/wallet/withdraw
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerWalletWithdrawPostWithRequestBuilder(authorization: String) -> RequestBuilder<Void> {
        let path = "/api/manager/wallet/withdraw"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
