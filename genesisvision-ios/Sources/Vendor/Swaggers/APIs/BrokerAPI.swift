//
// BrokerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class BrokerAPI {
    /**

     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerAccountCreatePost(authorization: String, request: NewManager? = nil, completion: @escaping ((_ data: UUID?,_ error: Error?) -> Void)) {
        apiBrokerAccountCreatePostWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /api/broker/account/create
     - examples: [{contentType=application/json, example="046b6c7f-0b8a-43b9-b35d-6489e6daee91"}]
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<UUID> 
     */
    open class func apiBrokerAccountCreatePostWithRequestBuilder(authorization: String, request: NewManager? = nil) -> RequestBuilder<UUID> {
        let path = "/api/broker/account/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UUID>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerAuthSignInPost(model: LoginViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiBrokerAuthSignInPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - POST /api/broker/auth/signIn
     - examples: [{contentType=application/json, example=""}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func apiBrokerAuthSignInPostWithRequestBuilder(model: LoginViewModel? = nil) -> RequestBuilder<String> {
        let path = "/api/broker/auth/signIn"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerAuthUpdateTokenGet(authorization: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiBrokerAuthUpdateTokenGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/broker/auth/updateToken
     - examples: [{contentType=application/json, example=""}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<String> 
     */
    open class func apiBrokerAuthUpdateTokenGetWithRequestBuilder(authorization: String) -> RequestBuilder<String> {
        let path = "/api/broker/auth/updateToken"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter brokerTradeServerId: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerInitDataGet(brokerTradeServerId: UUID, authorization: String, completion: @escaping ((_ data: BrokerInitData?,_ error: Error?) -> Void)) {
        apiBrokerInitDataGetWithRequestBuilder(brokerTradeServerId: brokerTradeServerId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/broker/initData
     - examples: [{contentType=application/json, example={
  "newManagerRequest" : [ {
    "password" : "password",
    "requestId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "name" : "name",
    "currency" : "currency",
    "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "email" : "email"
  }, {
    "password" : "password",
    "requestId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "name" : "name",
    "currency" : "currency",
    "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "email" : "email"
  } ],
  "investments" : [ {
    "investment" : {
      "feeEntrance" : 7.061401241503109,
      "period" : 5,
      "feeManagement" : 2.3021358869347655,
      "totalProfit" : 7.386281948385884,
      "rating" : 2.027123023002322,
      "description" : "description",
      "dateFrom" : "2000-01-23T04:56:07.000+00:00",
      "investMinAmount" : 9.301444243932576,
      "ordersCount" : 4,
      "isEnabled" : true,
      "dateTo" : "2000-01-23T04:56:07.000+00:00",
      "logo" : "logo",
      "feeSuccess" : 5.637376656633329,
      "lastPeriod" : {
        "number" : 0,
        "investmentRequest" : [ {
          "date" : "2000-01-23T04:56:07.000+00:00",
          "amount" : 1.4658129805029452,
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "type" : "Invest",
          "status" : "New"
        }, {
          "date" : "2000-01-23T04:56:07.000+00:00",
          "amount" : 1.4658129805029452,
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "type" : "Invest",
          "status" : "New"
        } ],
        "dateTo" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "dateFrom" : "2000-01-23T04:56:07.000+00:00",
        "startBalance" : 6.027456183070403,
        "status" : "Planned"
      },
      "investMaxAmount" : 3.616076749251911,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "managerTokensId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "managerAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    },
    "account" : {
      "brokerTradeServer" : {
        "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "name" : "name",
        "host" : "host",
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "type" : "Undefined",
        "broker" : {
          "name" : "name",
          "registrationDate" : "2000-01-23T04:56:07.000+00:00",
          "description" : "description",
          "logo" : "logo",
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "ipfsHash" : "ipfsHash",
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "currency" : "currency",
      "isConfirmed" : true,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "login" : "login"
    },
    "token" : {
      "tokenAddress" : "tokenAddress",
      "tokenSymbol" : "tokenSymbol",
      "tokenName" : "tokenName",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }
  }, {
    "investment" : {
      "feeEntrance" : 7.061401241503109,
      "period" : 5,
      "feeManagement" : 2.3021358869347655,
      "totalProfit" : 7.386281948385884,
      "rating" : 2.027123023002322,
      "description" : "description",
      "dateFrom" : "2000-01-23T04:56:07.000+00:00",
      "investMinAmount" : 9.301444243932576,
      "ordersCount" : 4,
      "isEnabled" : true,
      "dateTo" : "2000-01-23T04:56:07.000+00:00",
      "logo" : "logo",
      "feeSuccess" : 5.637376656633329,
      "lastPeriod" : {
        "number" : 0,
        "investmentRequest" : [ {
          "date" : "2000-01-23T04:56:07.000+00:00",
          "amount" : 1.4658129805029452,
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "type" : "Invest",
          "status" : "New"
        }, {
          "date" : "2000-01-23T04:56:07.000+00:00",
          "amount" : 1.4658129805029452,
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
          "type" : "Invest",
          "status" : "New"
        } ],
        "dateTo" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "dateFrom" : "2000-01-23T04:56:07.000+00:00",
        "startBalance" : 6.027456183070403,
        "status" : "Planned"
      },
      "investMaxAmount" : 3.616076749251911,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "managerTokensId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "managerAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    },
    "account" : {
      "brokerTradeServer" : {
        "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "name" : "name",
        "host" : "host",
        "registrationDate" : "2000-01-23T04:56:07.000+00:00",
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "type" : "Undefined",
        "broker" : {
          "name" : "name",
          "registrationDate" : "2000-01-23T04:56:07.000+00:00",
          "description" : "description",
          "logo" : "logo",
          "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
        }
      },
      "ipfsHash" : "ipfsHash",
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "currency" : "currency",
      "isConfirmed" : true,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "login" : "login"
    },
    "token" : {
      "tokenAddress" : "tokenAddress",
      "tokenSymbol" : "tokenSymbol",
      "tokenName" : "tokenName",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }
  } ]
}}]
     
     - parameter brokerTradeServerId: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<BrokerInitData> 
     */
    open class func apiBrokerInitDataGetWithRequestBuilder(brokerTradeServerId: UUID, authorization: String) -> RequestBuilder<BrokerInitData> {
        let path = "/api/broker/initData"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "brokerTradeServerId": brokerTradeServerId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrokerInitData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerPeriodCloseGet(investmentProgramId: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        apiBrokerPeriodCloseGetWithRequestBuilder(investmentProgramId: investmentProgramId, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /api/broker/period/close
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func apiBrokerPeriodCloseGetWithRequestBuilder(investmentProgramId: UUID, authorization: String) -> RequestBuilder<Void> {
        let path = "/api/broker/period/close"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "investmentProgramId": investmentProgramId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter periodId: (query)  
     - parameter balance: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerPeriodSetStartBalanceGet(periodId: UUID, balance: Double, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        apiBrokerPeriodSetStartBalanceGetWithRequestBuilder(periodId: periodId, balance: balance, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     - GET /api/broker/period/setStartBalance
     
     - parameter periodId: (query)  
     - parameter balance: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func apiBrokerPeriodSetStartBalanceGetWithRequestBuilder(periodId: UUID, balance: Double, authorization: String) -> RequestBuilder<Void> {
        let path = "/api/broker/period/setStartBalance"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "periodId": periodId, 
            "balance": balance
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**

     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerPeriodlosingDataGet(investmentProgramId: UUID, authorization: String, completion: @escaping ((_ data: ClosePeriodData?,_ error: Error?) -> Void)) {
        apiBrokerPeriodlosingDataGetWithRequestBuilder(investmentProgramId: investmentProgramId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     - GET /api/broker/period/сlosingData
     - examples: [{contentType=application/json, example={
  "nextPeriod" : {
    "number" : 0,
    "investmentRequest" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "amount" : 1.4658129805029452,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Invest",
      "status" : "New"
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "amount" : 1.4658129805029452,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Invest",
      "status" : "New"
    } ],
    "dateTo" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "dateFrom" : "2000-01-23T04:56:07.000+00:00",
    "startBalance" : 6.027456183070403,
    "status" : "Planned"
  },
  "canCloseCurrentPeriod" : true,
  "currentPeriod" : {
    "number" : 0,
    "investmentRequest" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "amount" : 1.4658129805029452,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Invest",
      "status" : "New"
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "amount" : 1.4658129805029452,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Invest",
      "status" : "New"
    } ],
    "dateTo" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "dateFrom" : "2000-01-23T04:56:07.000+00:00",
    "startBalance" : 6.027456183070403,
    "status" : "Planned"
  }
}}]
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ClosePeriodData> 
     */
    open class func apiBrokerPeriodlosingDataGetWithRequestBuilder(investmentProgramId: UUID, authorization: String) -> RequestBuilder<ClosePeriodData> {
        let path = "/api/broker/period/сlosingData"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "investmentProgramId": investmentProgramId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ClosePeriodData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
