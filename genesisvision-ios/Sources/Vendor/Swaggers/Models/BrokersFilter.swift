//
// BrokersFilter.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class BrokersFilter: Codable {

    public enum TradeServerType: Int, Codable { 
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
    }
    public var brokerName: String?
    public var tradeServerName: String?
    public var tradeServerType: TradeServerType?
    public var skip: Int?
    public var take: Int?


    
    public init(brokerName: String?, tradeServerName: String?, tradeServerType: TradeServerType?, skip: Int?, take: Int?) {
        self.brokerName = brokerName
        self.tradeServerName = tradeServerName
        self.tradeServerType = tradeServerType
        self.skip = skip
        self.take = take
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(brokerName, forKey: "brokerName")
        try container.encodeIfPresent(tradeServerName, forKey: "tradeServerName")
        try container.encodeIfPresent(tradeServerType, forKey: "tradeServerType")
        try container.encodeIfPresent(skip, forKey: "skip")
        try container.encodeIfPresent(take, forKey: "take")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        brokerName = try container.decodeIfPresent(String.self, forKey: "brokerName")
        tradeServerName = try container.decodeIfPresent(String.self, forKey: "tradeServerName")
        tradeServerType = try container.decodeIfPresent(TradeServerType.self, forKey: "tradeServerType")
        skip = try container.decodeIfPresent(Int.self, forKey: "skip")
        take = try container.decodeIfPresent(Int.self, forKey: "take")
    }
}

