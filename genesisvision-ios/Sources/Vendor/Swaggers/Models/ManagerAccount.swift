//
// ManagerAccount.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ManagerAccount: Codable {

    public var id: UUID?
    public var login: String?
    public var currency: String?
    public var ipfsHash: String?
    public var isConfirmed: Bool?
    public var brokerTradeServer: BrokerTradeServer?


    
    public init(id: UUID?, login: String?, currency: String?, ipfsHash: String?, isConfirmed: Bool?, brokerTradeServer: BrokerTradeServer?) {
        self.id = id
        self.login = login
        self.currency = currency
        self.ipfsHash = ipfsHash
        self.isConfirmed = isConfirmed
        self.brokerTradeServer = brokerTradeServer
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(login, forKey: "login")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(ipfsHash, forKey: "ipfsHash")
        try container.encodeIfPresent(isConfirmed, forKey: "isConfirmed")
        try container.encodeIfPresent(brokerTradeServer, forKey: "brokerTradeServer")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        login = try container.decodeIfPresent(String.self, forKey: "login")
        currency = try container.decodeIfPresent(String.self, forKey: "currency")
        ipfsHash = try container.decodeIfPresent(String.self, forKey: "ipfsHash")
        isConfirmed = try container.decodeIfPresent(Bool.self, forKey: "isConfirmed")
        brokerTradeServer = try container.decodeIfPresent(BrokerTradeServer.self, forKey: "brokerTradeServer")
    }
}

