//
// ManagersFilter.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ManagersFilter: Codable {

    public enum BrokerTradeServerType: Int, Codable { 
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _6 = 6
    }
    public var name: String?
    public var brokerName: String?
    public var brokerTradeServerName: String?
    public var brokerTradeServerType: BrokerTradeServerType?
    public var skip: Int?
    public var take: Int?


    
    public init(name: String?, brokerName: String?, brokerTradeServerName: String?, brokerTradeServerType: BrokerTradeServerType?, skip: Int?, take: Int?) {
        self.name = name
        self.brokerName = brokerName
        self.brokerTradeServerName = brokerTradeServerName
        self.brokerTradeServerType = brokerTradeServerType
        self.skip = skip
        self.take = take
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(brokerName, forKey: "brokerName")
        try container.encodeIfPresent(brokerTradeServerName, forKey: "brokerTradeServerName")
        try container.encodeIfPresent(brokerTradeServerType, forKey: "brokerTradeServerType")
        try container.encodeIfPresent(skip, forKey: "skip")
        try container.encodeIfPresent(take, forKey: "take")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        name = try container.decodeIfPresent(String.self, forKey: "name")
        brokerName = try container.decodeIfPresent(String.self, forKey: "brokerName")
        brokerTradeServerName = try container.decodeIfPresent(String.self, forKey: "brokerTradeServerName")
        brokerTradeServerType = try container.decodeIfPresent(BrokerTradeServerType.self, forKey: "brokerTradeServerType")
        skip = try container.decodeIfPresent(Int.self, forKey: "skip")
        take = try container.decodeIfPresent(Int.self, forKey: "take")
    }
}

