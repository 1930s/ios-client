//
// NewManagerRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class NewManagerRequest: Codable {

    public var brokerTradeServerId: UUID?
    public var userId: UUID?
    public var requestId: UUID?
    public var name: String?
    public var description: String?
    public var currency: String?
    public var tokenName: String?
    public var tokenSymbol: String?
    
    public init(brokerTradeServerId: UUID?, userId: UUID?, requestId: UUID?, name: String?, description: String?, currency: String?, tokenName: String?, tokenSymbol: String?) {
        self.brokerTradeServerId = brokerTradeServerId
        self.userId = userId
        self.requestId = requestId
        self.name = name
        self.description = description
        self.currency = currency
        self.tokenName = tokenName
        self.tokenSymbol = tokenSymbol
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(brokerTradeServerId, forKey: "brokerTradeServerId")
        try container.encodeIfPresent(userId, forKey: "userId")
        try container.encodeIfPresent(requestId, forKey: "requestId")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(tokenName, forKey: "tokenName")
        try container.encodeIfPresent(tokenSymbol, forKey: "tokenSymbol")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        brokerTradeServerId = try container.decodeIfPresent(UUID.self, forKey: "brokerTradeServerId")
        userId = try container.decodeIfPresent(UUID.self, forKey: "userId")
        requestId = try container.decodeIfPresent(UUID.self, forKey: "requestId")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        currency = try container.decodeIfPresent(String.self, forKey: "currency")
        tokenName = try container.decodeIfPresent(String.self, forKey: "tokenName")
        tokenSymbol = try container.decodeIfPresent(String.self, forKey: "tokenSymbol")
    }
}

