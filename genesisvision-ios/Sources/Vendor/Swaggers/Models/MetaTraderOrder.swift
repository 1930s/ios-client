//
// MetaTraderOrder.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class MetaTraderOrder: Codable {

    public enum Direction: Int, Codable { 
        case _0 = 0
        case _1 = 1
    }
    public var login: Int64?
    public var ticket: Int64?
    public var direction: Direction?
    public var symbol: String?
    public var dateOpen: Date?
    public var dateClose: Date?
    public var priceOpen: Double?
    public var priceClose: Double?
    public var profit: Double?
    public var volume: Double?


    
    public init(login: Int64?, ticket: Int64?, direction: Direction?, symbol: String?, dateOpen: Date?, dateClose: Date?, priceOpen: Double?, priceClose: Double?, profit: Double?, volume: Double?) {
        self.login = login
        self.ticket = ticket
        self.direction = direction
        self.symbol = symbol
        self.dateOpen = dateOpen
        self.dateClose = dateClose
        self.priceOpen = priceOpen
        self.priceClose = priceClose
        self.profit = profit
        self.volume = volume
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(login, forKey: "login")
        try container.encodeIfPresent(ticket, forKey: "ticket")
        try container.encodeIfPresent(direction, forKey: "direction")
        try container.encodeIfPresent(symbol, forKey: "symbol")
        try container.encodeIfPresent(dateOpen, forKey: "dateOpen")
        try container.encodeIfPresent(dateClose, forKey: "dateClose")
        try container.encodeIfPresent(priceOpen, forKey: "priceOpen")
        try container.encodeIfPresent(priceClose, forKey: "priceClose")
        try container.encodeIfPresent(profit, forKey: "profit")
        try container.encodeIfPresent(volume, forKey: "volume")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        login = try container.decodeIfPresent(Int64.self, forKey: "login")
        ticket = try container.decodeIfPresent(Int64.self, forKey: "ticket")
        direction = try container.decodeIfPresent(Direction.self, forKey: "direction")
        symbol = try container.decodeIfPresent(String.self, forKey: "symbol")
        dateOpen = try container.decodeIfPresent(Date.self, forKey: "dateOpen")
        dateClose = try container.decodeIfPresent(Date.self, forKey: "dateClose")
        priceOpen = try container.decodeIfPresent(Double.self, forKey: "priceOpen")
        priceClose = try container.decodeIfPresent(Double.self, forKey: "priceClose")
        profit = try container.decodeIfPresent(Double.self, forKey: "profit")
        volume = try container.decodeIfPresent(Double.self, forKey: "volume")
    }
}

