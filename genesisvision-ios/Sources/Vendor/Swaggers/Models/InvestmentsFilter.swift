//
// InvestmentsFilter.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class InvestmentsFilter: Codable {

    public enum Sorting: String, Codable { 
        case byRatingAsc = "ByRatingAsc"
        case byRatingDesc = "ByRatingDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
        case byOrdersAsc = "ByOrdersAsc"
        case byOrdersDesc = "ByOrdersDesc"
    }
    public var managerId: UUID?
    public var brokerId: UUID?
    public var brokerTradeServerId: UUID?
    public var investMaxAmountFrom: Double?
    public var investMaxAmountTo: Double?
    public var sorting: Sorting?
    public var skip: Int?
    public var take: Int?


    
    public init(managerId: UUID?, brokerId: UUID?, brokerTradeServerId: UUID?, investMaxAmountFrom: Double?, investMaxAmountTo: Double?, sorting: Sorting?, skip: Int?, take: Int?) {
        self.managerId = managerId
        self.brokerId = brokerId
        self.brokerTradeServerId = brokerTradeServerId
        self.investMaxAmountFrom = investMaxAmountFrom
        self.investMaxAmountTo = investMaxAmountTo
        self.sorting = sorting
        self.skip = skip
        self.take = take
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(managerId, forKey: "managerId")
        try container.encodeIfPresent(brokerId, forKey: "brokerId")
        try container.encodeIfPresent(brokerTradeServerId, forKey: "brokerTradeServerId")
        try container.encodeIfPresent(investMaxAmountFrom, forKey: "investMaxAmountFrom")
        try container.encodeIfPresent(investMaxAmountTo, forKey: "investMaxAmountTo")
        try container.encodeIfPresent(sorting, forKey: "sorting")
        try container.encodeIfPresent(skip, forKey: "skip")
        try container.encodeIfPresent(take, forKey: "take")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        managerId = try container.decodeIfPresent(UUID.self, forKey: "managerId")
        brokerId = try container.decodeIfPresent(UUID.self, forKey: "brokerId")
        brokerTradeServerId = try container.decodeIfPresent(UUID.self, forKey: "brokerTradeServerId")
        investMaxAmountFrom = try container.decodeIfPresent(Double.self, forKey: "investMaxAmountFrom")
        investMaxAmountTo = try container.decodeIfPresent(Double.self, forKey: "investMaxAmountTo")
        sorting = try container.decodeIfPresent(Sorting.self, forKey: "sorting")
        skip = try container.decodeIfPresent(Int.self, forKey: "skip")
        take = try container.decodeIfPresent(Int.self, forKey: "take")
    }
}

