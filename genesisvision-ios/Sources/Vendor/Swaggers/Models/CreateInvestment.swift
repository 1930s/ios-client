//
// CreateInvestment.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class CreateInvestment: Codable {

    public var managersAccountId: UUID?
    public var dateFrom: Date?
    public var dateTo: Date?
    public var description: String?
    public var feeEntrance: Double?
    public var feeManagement: Double?
    public var feeSuccess: Double?
    public var investMinAmount: Double?
    public var investMaxAmount: Double?
    public var period: Int?


    
    public init(managersAccountId: UUID?, dateFrom: Date?, dateTo: Date?, description: String?, feeEntrance: Double?, feeManagement: Double?, feeSuccess: Double?, investMinAmount: Double?, investMaxAmount: Double?, period: Int?) {
        self.managersAccountId = managersAccountId
        self.dateFrom = dateFrom
        self.dateTo = dateTo
        self.description = description
        self.feeEntrance = feeEntrance
        self.feeManagement = feeManagement
        self.feeSuccess = feeSuccess
        self.investMinAmount = investMinAmount
        self.investMaxAmount = investMaxAmount
        self.period = period
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(managersAccountId, forKey: "managersAccountId")
        try container.encodeIfPresent(dateFrom, forKey: "dateFrom")
        try container.encodeIfPresent(dateTo, forKey: "dateTo")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(feeEntrance, forKey: "feeEntrance")
        try container.encodeIfPresent(feeManagement, forKey: "feeManagement")
        try container.encodeIfPresent(feeSuccess, forKey: "feeSuccess")
        try container.encodeIfPresent(investMinAmount, forKey: "investMinAmount")
        try container.encodeIfPresent(investMaxAmount, forKey: "investMaxAmount")
        try container.encodeIfPresent(period, forKey: "period")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        managersAccountId = try container.decodeIfPresent(UUID.self, forKey: "managersAccountId")
        dateFrom = try container.decodeIfPresent(Date.self, forKey: "dateFrom")
        dateTo = try container.decodeIfPresent(Date.self, forKey: "dateTo")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        feeEntrance = try container.decodeIfPresent(Double.self, forKey: "feeEntrance")
        feeManagement = try container.decodeIfPresent(Double.self, forKey: "feeManagement")
        feeSuccess = try container.decodeIfPresent(Double.self, forKey: "feeSuccess")
        investMinAmount = try container.decodeIfPresent(Double.self, forKey: "investMinAmount")
        investMaxAmount = try container.decodeIfPresent(Double.self, forKey: "investMaxAmount")
        period = try container.decodeIfPresent(Int.self, forKey: "period")
    }
}

