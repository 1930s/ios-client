//
// ParticipantViewModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ParticipantViewModel: Codable {

    public var id: UUID?
    public var name: String?
    public var avatar: String?
    public var regDate: Date?
    public var login: Int64?
    public var ipfsHash: String?
    public var ordersCount: Int?
    public var startBalance: Double?
    public var totalProfit: Double?
    public var totalProfitInPercent: Double?
    public var chart: [Double]?
    public var place: Int?


    
    public init(id: UUID?, name: String?, avatar: String?, regDate: Date?, login: Int64?, ipfsHash: String?, ordersCount: Int?, startBalance: Double?, totalProfit: Double?, totalProfitInPercent: Double?, chart: [Double]?, place: Int?) {
        self.id = id
        self.name = name
        self.avatar = avatar
        self.regDate = regDate
        self.login = login
        self.ipfsHash = ipfsHash
        self.ordersCount = ordersCount
        self.startBalance = startBalance
        self.totalProfit = totalProfit
        self.totalProfitInPercent = totalProfitInPercent
        self.chart = chart
        self.place = place
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(avatar, forKey: "avatar")
        try container.encodeIfPresent(regDate, forKey: "regDate")
        try container.encodeIfPresent(login, forKey: "login")
        try container.encodeIfPresent(ipfsHash, forKey: "ipfsHash")
        try container.encodeIfPresent(ordersCount, forKey: "ordersCount")
        try container.encodeIfPresent(startBalance, forKey: "startBalance")
        try container.encodeIfPresent(totalProfit, forKey: "totalProfit")
        try container.encodeIfPresent(totalProfitInPercent, forKey: "totalProfitInPercent")
        try container.encodeIfPresent(chart, forKey: "chart")
        try container.encodeIfPresent(place, forKey: "place")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        avatar = try container.decodeIfPresent(String.self, forKey: "avatar")
        regDate = try container.decodeIfPresent(Date.self, forKey: "regDate")
        login = try container.decodeIfPresent(Int64.self, forKey: "login")
        ipfsHash = try container.decodeIfPresent(String.self, forKey: "ipfsHash")
        ordersCount = try container.decodeIfPresent(Int.self, forKey: "ordersCount")
        startBalance = try container.decodeIfPresent(Double.self, forKey: "startBalance")
        totalProfit = try container.decodeIfPresent(Double.self, forKey: "totalProfit")
        totalProfitInPercent = try container.decodeIfPresent(Double.self, forKey: "totalProfitInPercent")
        chart = try container.decodeIfPresent([Double].self, forKey: "chart")
        place = try container.decodeIfPresent(Int.self, forKey: "place")
    }
}

