//
// NewTrade.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class NewTrade: Codable {

    public enum Direction: String, Codable { 
        case buy = "Buy"
        case sell = "Sell"
    }
    public var tradeAccountId: UUID?
    public var ticket: Int64?
    public var direction: Direction?
    public var symbol: String?
    public var price: Double?
    public var profit: Double?
    public var volume: Double?
    public var date: Date?


    
    public init(tradeAccountId: UUID?, ticket: Int64?, direction: Direction?, symbol: String?, price: Double?, profit: Double?, volume: Double?, date: Date?) {
        self.tradeAccountId = tradeAccountId
        self.ticket = ticket
        self.direction = direction
        self.symbol = symbol
        self.price = price
        self.profit = profit
        self.volume = volume
        self.date = date
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(tradeAccountId, forKey: "tradeAccountId")
        try container.encodeIfPresent(ticket, forKey: "ticket")
        try container.encodeIfPresent(direction, forKey: "direction")
        try container.encodeIfPresent(symbol, forKey: "symbol")
        try container.encodeIfPresent(price, forKey: "price")
        try container.encodeIfPresent(profit, forKey: "profit")
        try container.encodeIfPresent(volume, forKey: "volume")
        try container.encodeIfPresent(date, forKey: "date")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        tradeAccountId = try container.decodeIfPresent(UUID.self, forKey: "tradeAccountId")
        ticket = try container.decodeIfPresent(Int64.self, forKey: "ticket")
        direction = try container.decodeIfPresent(Direction.self, forKey: "direction")
        symbol = try container.decodeIfPresent(String.self, forKey: "symbol")
        price = try container.decodeIfPresent(Double.self, forKey: "price")
        profit = try container.decodeIfPresent(Double.self, forKey: "profit")
        volume = try container.decodeIfPresent(Double.self, forKey: "volume")
        date = try container.decodeIfPresent(Date.self, forKey: "date")
    }
}

