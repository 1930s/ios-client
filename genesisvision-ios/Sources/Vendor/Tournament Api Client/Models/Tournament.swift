//
// Tournament.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class Tournament: Codable {

    public var id: UUID?
    public var title: String?
    public var description: String?
    public var dateFrom: Date?
    public var dateTo: Date?
    public var registerDateFrom: Date?
    public var registerDateTo: Date?
    public var isEnabled: Bool?
    public var startDeposit: Double?


    
    public init(id: UUID?, title: String?, description: String?, dateFrom: Date?, dateTo: Date?, registerDateFrom: Date?, registerDateTo: Date?, isEnabled: Bool?, startDeposit: Double?) {
        self.id = id
        self.title = title
        self.description = description
        self.dateFrom = dateFrom
        self.dateTo = dateTo
        self.registerDateFrom = registerDateFrom
        self.registerDateTo = registerDateTo
        self.isEnabled = isEnabled
        self.startDeposit = startDeposit
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(dateFrom, forKey: "dateFrom")
        try container.encodeIfPresent(dateTo, forKey: "dateTo")
        try container.encodeIfPresent(registerDateFrom, forKey: "registerDateFrom")
        try container.encodeIfPresent(registerDateTo, forKey: "registerDateTo")
        try container.encodeIfPresent(isEnabled, forKey: "isEnabled")
        try container.encodeIfPresent(startDeposit, forKey: "startDeposit")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        dateFrom = try container.decodeIfPresent(Date.self, forKey: "dateFrom")
        dateTo = try container.decodeIfPresent(Date.self, forKey: "dateTo")
        registerDateFrom = try container.decodeIfPresent(Date.self, forKey: "registerDateFrom")
        registerDateTo = try container.decodeIfPresent(Date.self, forKey: "registerDateTo")
        isEnabled = try container.decodeIfPresent(Bool.self, forKey: "isEnabled")
        startDeposit = try container.decodeIfPresent(Double.self, forKey: "startDeposit")
    }
}

