//
// TournamentAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class TournamentAPI {
    /**
     Participant info
     
     - parameter participantId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiTournamentParticipantGet(participantId: UUID, completion: @escaping ((_ data: ParticipantViewModel?,_ error: Error?) -> Void)) {
        apiTournamentParticipantGetWithRequestBuilder(participantId: participantId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Participant info
     - GET /api/tournament/participant
     - examples: [{contentType=application/json, example={
  "ordersCount" : 6,
  "totalProfit" : 5.962133916683182,
  "totalProfitInPercent" : 5.637376656633329,
  "name" : "name",
  "ipfsHash" : "ipfsHash",
  "regDate" : "2000-01-23T04:56:07.000+00:00",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "avatar" : "avatar",
  "place" : 7,
  "login" : 0,
  "chart" : [ 2.3021358869347655, 2.3021358869347655 ],
  "startBalance" : 1.4658129805029452
}}]
     
     - parameter participantId: (query)  

     - returns: RequestBuilder<ParticipantViewModel> 
     */
    open class func apiTournamentParticipantGetWithRequestBuilder(participantId: UUID) -> RequestBuilder<ParticipantViewModel> {
        let path = "/api/tournament/participant"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "participantId": participantId
        ])
        

        let requestBuilder: RequestBuilder<ParticipantViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Participant trades history
     
     - parameter filter: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiTournamentParticipantTradesPost(filter: TradesFilter? = nil, completion: @escaping ((_ data: TradesViewModel?,_ error: Error?) -> Void)) {
        apiTournamentParticipantTradesPostWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Participant trades history
     - POST /api/tournament/participant/trades
     - examples: [{contentType=application/json, example={
  "total" : 5,
  "trades" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "volume" : 5.962133916683182,
    "symbol" : "symbol",
    "ticket" : 0,
    "price" : 6.027456183070403,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profit" : 1.4658129805029452,
    "direction" : "Buy"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "volume" : 5.962133916683182,
    "symbol" : "symbol",
    "ticket" : 0,
    "price" : 6.027456183070403,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profit" : 1.4658129805029452,
    "direction" : "Buy"
  } ]
}}]
     
     - parameter filter: (body)  (optional)

     - returns: RequestBuilder<TradesViewModel> 
     */
    open class func apiTournamentParticipantTradesPostWithRequestBuilder(filter: TradesFilter? = nil) -> RequestBuilder<TradesViewModel> {
        let path = "/api/tournament/participant/trades"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filter)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TradesViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Participants summary
     
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiTournamentParticipantsCountGet(completion: @escaping ((_ data: ParticipantsSummaryViewModel?,_ error: Error?) -> Void)) {
        apiTournamentParticipantsCountGetWithRequestBuilder().execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Participants summary
     - GET /api/tournament/participants/count
     - examples: [{contentType=application/json, example={
  "participantsCount" : 0,
  "lastRegistrationDate" : "2000-01-23T04:56:07.000+00:00"
}}]

     - returns: RequestBuilder<ParticipantsSummaryViewModel> 
     */
    open class func apiTournamentParticipantsCountGetWithRequestBuilder() -> RequestBuilder<ParticipantsSummaryViewModel> {
        let path = "/api/tournament/participants/count"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ParticipantsSummaryViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Participants list
     
     - parameter filter: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiTournamentParticipantsPost(filter: ParticipantsFilter? = nil, completion: @escaping ((_ data: ParticipantsViewModel?,_ error: Error?) -> Void)) {
        apiTournamentParticipantsPostWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Participants list
     - POST /api/tournament/participants
     - examples: [{contentType=application/json, example={
  "total" : 9,
  "participants" : [ {
    "ordersCount" : 6,
    "totalProfit" : 5.962133916683182,
    "totalProfitInPercent" : 5.637376656633329,
    "name" : "name",
    "ipfsHash" : "ipfsHash",
    "regDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "avatar" : "avatar",
    "place" : 7,
    "login" : 0,
    "chart" : [ 2.3021358869347655, 2.3021358869347655 ],
    "startBalance" : 1.4658129805029452
  }, {
    "ordersCount" : 6,
    "totalProfit" : 5.962133916683182,
    "totalProfitInPercent" : 5.637376656633329,
    "name" : "name",
    "ipfsHash" : "ipfsHash",
    "regDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "avatar" : "avatar",
    "place" : 7,
    "login" : 0,
    "chart" : [ 2.3021358869347655, 2.3021358869347655 ],
    "startBalance" : 1.4658129805029452
  } ]
}}]
     
     - parameter filter: (body)  (optional)

     - returns: RequestBuilder<ParticipantsViewModel> 
     */
    open class func apiTournamentParticipantsPostWithRequestBuilder(filter: ParticipantsFilter? = nil) -> RequestBuilder<ParticipantsViewModel> {
        let path = "/api/tournament/participants"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filter)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<ParticipantsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Registration for the tournament
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiTournamentRegisterPost(model: NewParticipant? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiTournamentRegisterPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Registration for the tournament
     - POST /api/tournament/register
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiTournamentRegisterPostWithRequestBuilder(model: NewParticipant? = nil) -> RequestBuilder<Void> {
        let path = "/api/tournament/register"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
