//
// BrokerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class BrokerAPI {
    /**
     Create manager
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerAccountCreatePost(authorization: String, request: NewManager? = nil, completion: @escaping ((_ data: UUID?,_ error: Error?) -> Void)) {
        apiBrokerAccountCreatePostWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create manager
     - POST /api/broker/account/create
     - examples: [{contentType=application/json, example="046b6c7f-0b8a-43b9-b35d-6489e6daee91"}]
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<UUID> 
     */
    open class func apiBrokerAccountCreatePostWithRequestBuilder(authorization: String, request: NewManager? = nil) -> RequestBuilder<UUID> {
        let path = "/api/broker/account/create"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UUID>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Authorize
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerAuthSignInPost(model: LoginViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiBrokerAuthSignInPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Authorize
     - POST /api/broker/auth/signIn
     - examples: [{contentType=application/json, example=""}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func apiBrokerAuthSignInPostWithRequestBuilder(model: LoginViewModel? = nil) -> RequestBuilder<String> {
        let path = "/api/broker/auth/signIn"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update auth token
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerAuthUpdateTokenGet(authorization: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiBrokerAuthUpdateTokenGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update auth token
     - GET /api/broker/auth/updateToken
     - examples: [{contentType=application/json, example=""}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<String> 
     */
    open class func apiBrokerAuthUpdateTokenGetWithRequestBuilder(authorization: String) -> RequestBuilder<String> {
        let path = "/api/broker/auth/updateToken"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get broker initial data
     
     - parameter brokerTradeServerId: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerInitDataGet(brokerTradeServerId: UUID, authorization: String, completion: @escaping ((_ data: BrokerInitData?,_ error: Error?) -> Void)) {
        apiBrokerInitDataGetWithRequestBuilder(brokerTradeServerId: brokerTradeServerId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get broker initial data
     - GET /api/broker/initData
     - examples: [{contentType=application/json, example={
  "newManagerRequest" : [ {
    "password" : "password",
    "requestId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "name" : "name",
    "currency" : "Undefined",
    "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "email" : "email"
  }, {
    "password" : "password",
    "requestId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "name" : "name",
    "currency" : "Undefined",
    "userId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "email" : "email"
  } ],
  "investments" : [ {
    "feeEntrance" : 5.962133916683182,
    "period" : 0,
    "feeManagement" : 1.4658129805029452,
    "description" : "description",
    "dateFrom" : "2000-01-23T04:56:07.000+00:00",
    "login" : "login",
    "investMinAmount" : 5.637376656633329,
    "isEnabled" : true,
    "dateTo" : "2000-01-23T04:56:07.000+00:00",
    "ipfsHash" : "ipfsHash",
    "feeSuccess" : 6.027456183070403,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investMaxAmount" : 2.3021358869347655,
    "lastPeriod" : {
      "number" : 7,
      "managerStartBalance" : 3.616076749251911,
      "managerStartShare" : 2.027123023002322,
      "investmentRequest" : [ {
        "date" : "2000-01-23T04:56:07.000+00:00",
        "amount" : 4.145608029883936,
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "type" : "Invest",
        "status" : "New"
      }, {
        "date" : "2000-01-23T04:56:07.000+00:00",
        "amount" : 4.145608029883936,
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "type" : "Invest",
        "status" : "New"
      } ],
      "dateTo" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "dateFrom" : "2000-01-23T04:56:07.000+00:00",
      "startBalance" : 9.301444243932576,
      "status" : "Planned"
    },
    "managerAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  }, {
    "feeEntrance" : 5.962133916683182,
    "period" : 0,
    "feeManagement" : 1.4658129805029452,
    "description" : "description",
    "dateFrom" : "2000-01-23T04:56:07.000+00:00",
    "login" : "login",
    "investMinAmount" : 5.637376656633329,
    "isEnabled" : true,
    "dateTo" : "2000-01-23T04:56:07.000+00:00",
    "ipfsHash" : "ipfsHash",
    "feeSuccess" : 6.027456183070403,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investMaxAmount" : 2.3021358869347655,
    "lastPeriod" : {
      "number" : 7,
      "managerStartBalance" : 3.616076749251911,
      "managerStartShare" : 2.027123023002322,
      "investmentRequest" : [ {
        "date" : "2000-01-23T04:56:07.000+00:00",
        "amount" : 4.145608029883936,
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "type" : "Invest",
        "status" : "New"
      }, {
        "date" : "2000-01-23T04:56:07.000+00:00",
        "amount" : 4.145608029883936,
        "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
        "type" : "Invest",
        "status" : "New"
      } ],
      "dateTo" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "dateFrom" : "2000-01-23T04:56:07.000+00:00",
      "startBalance" : 9.301444243932576,
      "status" : "Planned"
    },
    "managerAccountId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  } ]
}}]
     
     - parameter brokerTradeServerId: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<BrokerInitData> 
     */
    open class func apiBrokerInitDataGetWithRequestBuilder(brokerTradeServerId: UUID, authorization: String) -> RequestBuilder<BrokerInitData> {
        let path = "/api/broker/initData"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "brokerTradeServerId": brokerTradeServerId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<BrokerInitData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Accrue investors' profits
     
     - parameter authorization: (header) JWT access token 
     - parameter accrual: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerPeriodAccrueProfitsPost(authorization: String, accrual: InvestmentProgramAccrual? = nil, completion: @escaping ((_ data: UUID?,_ error: Error?) -> Void)) {
        apiBrokerPeriodAccrueProfitsPostWithRequestBuilder(authorization: authorization, accrual: accrual).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Accrue investors' profits
     - POST /api/broker/period/accrueProfits
     - examples: [{contentType=application/json, example="046b6c7f-0b8a-43b9-b35d-6489e6daee91"}]
     
     - parameter authorization: (header) JWT access token 
     - parameter accrual: (body)  (optional)

     - returns: RequestBuilder<UUID> 
     */
    open class func apiBrokerPeriodAccrueProfitsPostWithRequestBuilder(authorization: String, accrual: InvestmentProgramAccrual? = nil) -> RequestBuilder<UUID> {
        let path = "/api/broker/period/accrueProfits"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accrual)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UUID>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Close investment period
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerPeriodClosePost(investmentProgramId: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        apiBrokerPeriodClosePostWithRequestBuilder(investmentProgramId: investmentProgramId, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Close investment period
     - POST /api/broker/period/close
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func apiBrokerPeriodClosePostWithRequestBuilder(investmentProgramId: UUID, authorization: String) -> RequestBuilder<Void> {
        let path = "/api/broker/period/close"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "investmentProgramId": investmentProgramId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Process investment requests
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerPeriodProcessInvestmentRequestsPost(investmentProgramId: UUID, authorization: String, completion: @escaping ((_ data: UUID?,_ error: Error?) -> Void)) {
        apiBrokerPeriodProcessInvestmentRequestsPostWithRequestBuilder(investmentProgramId: investmentProgramId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Process investment requests
     - POST /api/broker/period/processInvestmentRequests
     - examples: [{contentType=application/json, example="046b6c7f-0b8a-43b9-b35d-6489e6daee91"}]
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<UUID> 
     */
    open class func apiBrokerPeriodProcessInvestmentRequestsPostWithRequestBuilder(investmentProgramId: UUID, authorization: String) -> RequestBuilder<UUID> {
        let path = "/api/broker/period/processInvestmentRequests"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "investmentProgramId": investmentProgramId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UUID>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Set investment period start balance, manager share, manager balance
     
     - parameter investmentProgramId: (query)  
     - parameter balance: (query)  
     - parameter managerBalance: (query)  
     - parameter managerShare: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerPeriodSetStartValuesPost(investmentProgramId: UUID, balance: Double, managerBalance: Double, managerShare: Double, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        apiBrokerPeriodSetStartValuesPostWithRequestBuilder(investmentProgramId: investmentProgramId, balance: balance, managerBalance: managerBalance, managerShare: managerShare, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Set investment period start balance, manager share, manager balance
     - POST /api/broker/period/setStartValues
     
     - parameter investmentProgramId: (query)  
     - parameter balance: (query)  
     - parameter managerBalance: (query)  
     - parameter managerShare: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func apiBrokerPeriodSetStartValuesPostWithRequestBuilder(investmentProgramId: UUID, balance: Double, managerBalance: Double, managerShare: Double, authorization: String) -> RequestBuilder<Void> {
        let path = "/api/broker/period/setStartValues"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "investmentProgramId": investmentProgramId, 
            "balance": balance, 
            "managerBalance": managerBalance, 
            "managerShare": managerShare
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get data for closing investment period
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerPeriodlosingDataGet(investmentProgramId: UUID, authorization: String, completion: @escaping ((_ data: ClosePeriodData?,_ error: Error?) -> Void)) {
        apiBrokerPeriodlosingDataGetWithRequestBuilder(investmentProgramId: investmentProgramId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get data for closing investment period
     - GET /api/broker/period/сlosingData
     - examples: [{contentType=application/json, example={
  "tokenHolders" : [ {
    "amount" : 0.8008281904610115,
    "investorId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  }, {
    "amount" : 0.8008281904610115,
    "investorId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  } ],
  "canCloseCurrentPeriod" : true,
  "currentPeriod" : {
    "number" : 7,
    "managerStartBalance" : 3.616076749251911,
    "managerStartShare" : 2.027123023002322,
    "investmentRequest" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "amount" : 4.145608029883936,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Invest",
      "status" : "New"
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "amount" : 4.145608029883936,
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "type" : "Invest",
      "status" : "New"
    } ],
    "dateTo" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "dateFrom" : "2000-01-23T04:56:07.000+00:00",
    "startBalance" : 9.301444243932576,
    "status" : "Planned"
  }
}}]
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ClosePeriodData> 
     */
    open class func apiBrokerPeriodlosingDataGetWithRequestBuilder(investmentProgramId: UUID, authorization: String) -> RequestBuilder<ClosePeriodData> {
        let path = "/api/broker/period/сlosingData"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "investmentProgramId": investmentProgramId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ClosePeriodData>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     New trade event
     
     - parameter authorization: (header) JWT access token 
     - parameter tradeEvent: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerTradesNewPost(authorization: String, tradeEvent: NewTradeEvent? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiBrokerTradesNewPostWithRequestBuilder(authorization: authorization, tradeEvent: tradeEvent).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     New trade event
     - POST /api/broker/trades/new
     
     - parameter authorization: (header) JWT access token 
     - parameter tradeEvent: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiBrokerTradesNewPostWithRequestBuilder(authorization: String, tradeEvent: NewTradeEvent? = nil) -> RequestBuilder<Void> {
        let path = "/api/broker/trades/new"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: tradeEvent)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     New open trades event
     
     - parameter authorization: (header) JWT access token 
     - parameter trades: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerTradesOpenTradesNewPost(authorization: String, trades: NewOpenTradesEvent? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiBrokerTradesOpenTradesNewPostWithRequestBuilder(authorization: authorization, trades: trades).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     New open trades event
     - POST /api/broker/trades/openTrades/new
     
     - parameter authorization: (header) JWT access token 
     - parameter trades: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiBrokerTradesOpenTradesNewPostWithRequestBuilder(authorization: String, trades: NewOpenTradesEvent? = nil) -> RequestBuilder<Void> {
        let path = "/api/broker/trades/openTrades/new"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: trades)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Update manager token initial price/total supply after loss
     
     - parameter investmentProgramId: (query)  
     - parameter investorLossShare: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiBrokerTradesReevaluateManagerTokenPost(investmentProgramId: UUID, investorLossShare: Double, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        apiBrokerTradesReevaluateManagerTokenPostWithRequestBuilder(investmentProgramId: investmentProgramId, investorLossShare: investorLossShare, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update manager token initial price/total supply after loss
     - POST /api/broker/trades/reevaluateManagerToken
     
     - parameter investmentProgramId: (query)  
     - parameter investorLossShare: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func apiBrokerTradesReevaluateManagerTokenPostWithRequestBuilder(investmentProgramId: UUID, investorLossShare: Double, authorization: String) -> RequestBuilder<Void> {
        let path = "/api/broker/trades/reevaluateManagerToken"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "investmentProgramId": investmentProgramId, 
            "investorLossShare": investorLossShare
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
