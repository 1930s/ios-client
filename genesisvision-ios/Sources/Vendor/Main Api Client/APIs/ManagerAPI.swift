//
// ManagerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ManagerAPI {
    /**
     Create new investment request
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAccountNewInvestmentRequestPost(authorization: String, request: NewInvestmentRequest? = nil, completion: @escaping ((_ data: UUID?,_ error: Error?) -> Void)) {
        apiManagerAccountNewInvestmentRequestPostWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Create new investment request
     - POST /api/manager/account/newInvestmentRequest
     - examples: [{contentType=application/json, example="046b6c7f-0b8a-43b9-b35d-6489e6daee91"}]
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<UUID> 
     */
    open class func apiManagerAccountNewInvestmentRequestPostWithRequestBuilder(authorization: String, request: NewInvestmentRequest? = nil) -> RequestBuilder<UUID> {
        let path = "/api/manager/account/newInvestmentRequest"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<UUID>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Change password
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAuthChangePasswordPost(authorization: String, model: ChangePasswordViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerAuthChangePasswordPostWithRequestBuilder(authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Change password
     - POST /api/manager/auth/changePassword
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerAuthChangePasswordPostWithRequestBuilder(authorization: String, model: ChangePasswordViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/manager/auth/changePassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Confirm email after registration
     
     - parameter userId: (query)  (optional)
     - parameter code: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAuthConfirmEmailPost(userId: String? = nil, code: String? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiManagerAuthConfirmEmailPostWithRequestBuilder(userId: userId, code: code).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Confirm email after registration
     - POST /api/manager/auth/confirmEmail
     - examples: [{contentType=application/json, example=""}]
     
     - parameter userId: (query)  (optional)
     - parameter code: (query)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func apiManagerAuthConfirmEmailPostWithRequestBuilder(userId: String? = nil, code: String? = nil) -> RequestBuilder<String> {
        let path = "/api/manager/auth/confirmEmail"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userId": userId, 
            "code": code
        ])
        

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Forgot password manager
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAuthForgotPasswordPost(model: ForgotPasswordViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerAuthForgotPasswordPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Forgot password manager
     - POST /api/manager/auth/forgotPassword
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerAuthForgotPasswordPostWithRequestBuilder(model: ForgotPasswordViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/manager/auth/forgotPassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Reset password
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAuthResetPasswordPost(model: ResetPasswordViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiManagerAuthResetPasswordPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Reset password
     - POST /api/manager/auth/resetPassword
     - examples: [{contentType=application/json, example=""}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func apiManagerAuthResetPasswordPostWithRequestBuilder(model: ResetPasswordViewModel? = nil) -> RequestBuilder<String> {
        let path = "/api/manager/auth/resetPassword"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Authorize
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAuthSignInPost(model: LoginViewModel? = nil, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiManagerAuthSignInPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Authorize
     - POST /api/manager/auth/signIn
     - examples: [{contentType=application/json, example=""}]
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<String> 
     */
    open class func apiManagerAuthSignInPostWithRequestBuilder(model: LoginViewModel? = nil) -> RequestBuilder<String> {
        let path = "/api/manager/auth/signIn"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Register new manager
     
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAuthSignUpPost(model: RegisterManagerViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerAuthSignUpPostWithRequestBuilder(model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Register new manager
     - POST /api/manager/auth/signUp
     
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerAuthSignUpPostWithRequestBuilder(model: RegisterManagerViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/manager/auth/signUp"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update auth token
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerAuthUpdateTokenGet(authorization: String, completion: @escaping ((_ data: String?,_ error: Error?) -> Void)) {
        apiManagerAuthUpdateTokenGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Update auth token
     - GET /api/manager/auth/updateToken
     - examples: [{contentType=application/json, example=""}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<String> 
     */
    open class func apiManagerAuthUpdateTokenGetWithRequestBuilder(authorization: String) -> RequestBuilder<String> {
        let path = "/api/manager/auth/updateToken"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<String>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get all enabled trade servers
     
     - parameter filter: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerBrokersPost(filter: BrokersFilter? = nil, completion: @escaping ((_ data: BrokersViewModel?,_ error: Error?) -> Void)) {
        apiManagerBrokersPostWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get all enabled trade servers
     - POST /api/manager/brokers
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "brokers" : [ {
    "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "name" : "name",
    "host" : "host",
    "registrationDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Undefined",
    "broker" : {
      "name" : "name",
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "description" : "description",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }
  }, {
    "brokerId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "name" : "name",
    "host" : "host",
    "registrationDate" : "2000-01-23T04:56:07.000+00:00",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Undefined",
    "broker" : {
      "name" : "name",
      "registrationDate" : "2000-01-23T04:56:07.000+00:00",
      "description" : "description",
      "logo" : "logo",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
    }
  } ]
}}]
     
     - parameter filter: (body)  (optional)

     - returns: RequestBuilder<BrokersViewModel> 
     */
    open class func apiManagerBrokersPostWithRequestBuilder(filter: BrokersFilter? = nil) -> RequestBuilder<BrokersViewModel> {
        let path = "/api/manager/brokers"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filter)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<BrokersViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Dashboard pending programs
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerDashboardPendingProgramsGet(authorization: String, completion: @escaping ((_ data: ManagerInvestmentPrograms?,_ error: Error?) -> Void)) {
        apiManagerDashboardPendingProgramsGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Dashboard pending programs
     - GET /api/manager/dashboard/pendingPrograms
     - examples: [{contentType=application/json, example={
  "investmentPrograms" : [ {
    "startOfPeriod" : "2000-01-23T04:56:07.000+00:00",
    "periodDuration" : 5,
    "level" : 0,
    "minAccountBalance" : 4.145608029883936,
    "description" : "description",
    "title" : "title",
    "profitCurrent" : 9.301444243932576,
    "isInvestEnable" : true,
    "login" : "login",
    "token" : {
      "tokenSymbol" : "tokenSymbol",
      "initialPrice" : 9.965781217890562,
      "tokenName" : "tokenName"
    },
    "tradesCount" : 1,
    "isWithdrawEnable" : true,
    "balance" : 6.027456183070403,
    "minAccountBalanceUsd" : 2.027123023002322,
    "isEnabled" : true,
    "logo" : "logo",
    "currency" : "Undefined",
    "profitTotal" : 2.3021358869347655,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investorsCount" : 5,
    "profitTotalGvt" : 7.061401241503109,
    "ownBalance" : 3.616076749251911
  }, {
    "startOfPeriod" : "2000-01-23T04:56:07.000+00:00",
    "periodDuration" : 5,
    "level" : 0,
    "minAccountBalance" : 4.145608029883936,
    "description" : "description",
    "title" : "title",
    "profitCurrent" : 9.301444243932576,
    "isInvestEnable" : true,
    "login" : "login",
    "token" : {
      "tokenSymbol" : "tokenSymbol",
      "initialPrice" : 9.965781217890562,
      "tokenName" : "tokenName"
    },
    "tradesCount" : 1,
    "isWithdrawEnable" : true,
    "balance" : 6.027456183070403,
    "minAccountBalanceUsd" : 2.027123023002322,
    "isEnabled" : true,
    "logo" : "logo",
    "currency" : "Undefined",
    "profitTotal" : 2.3021358869347655,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investorsCount" : 5,
    "profitTotalGvt" : 7.061401241503109,
    "ownBalance" : 3.616076749251911
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ManagerInvestmentPrograms> 
     */
    open class func apiManagerDashboardPendingProgramsGetWithRequestBuilder(authorization: String) -> RequestBuilder<ManagerInvestmentPrograms> {
        let path = "/api/manager/dashboard/pendingPrograms"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerInvestmentPrograms>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Dashboard programs
     
     - parameter authorization: (header) JWT access token 
     - parameter filter: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerDashboardProgramsPost(authorization: String, filter: ManagerDashboardProgramsFilter? = nil, completion: @escaping ((_ data: ManagerInvestmentPrograms?,_ error: Error?) -> Void)) {
        apiManagerDashboardProgramsPostWithRequestBuilder(authorization: authorization, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Dashboard programs
     - POST /api/manager/dashboard/programs
     - examples: [{contentType=application/json, example={
  "investmentPrograms" : [ {
    "startOfPeriod" : "2000-01-23T04:56:07.000+00:00",
    "periodDuration" : 5,
    "level" : 0,
    "minAccountBalance" : 4.145608029883936,
    "description" : "description",
    "title" : "title",
    "profitCurrent" : 9.301444243932576,
    "isInvestEnable" : true,
    "login" : "login",
    "token" : {
      "tokenSymbol" : "tokenSymbol",
      "initialPrice" : 9.965781217890562,
      "tokenName" : "tokenName"
    },
    "tradesCount" : 1,
    "isWithdrawEnable" : true,
    "balance" : 6.027456183070403,
    "minAccountBalanceUsd" : 2.027123023002322,
    "isEnabled" : true,
    "logo" : "logo",
    "currency" : "Undefined",
    "profitTotal" : 2.3021358869347655,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investorsCount" : 5,
    "profitTotalGvt" : 7.061401241503109,
    "ownBalance" : 3.616076749251911
  }, {
    "startOfPeriod" : "2000-01-23T04:56:07.000+00:00",
    "periodDuration" : 5,
    "level" : 0,
    "minAccountBalance" : 4.145608029883936,
    "description" : "description",
    "title" : "title",
    "profitCurrent" : 9.301444243932576,
    "isInvestEnable" : true,
    "login" : "login",
    "token" : {
      "tokenSymbol" : "tokenSymbol",
      "initialPrice" : 9.965781217890562,
      "tokenName" : "tokenName"
    },
    "tradesCount" : 1,
    "isWithdrawEnable" : true,
    "balance" : 6.027456183070403,
    "minAccountBalanceUsd" : 2.027123023002322,
    "isEnabled" : true,
    "logo" : "logo",
    "currency" : "Undefined",
    "profitTotal" : 2.3021358869347655,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investorsCount" : 5,
    "profitTotalGvt" : 7.061401241503109,
    "ownBalance" : 3.616076749251911
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter filter: (body)  (optional)

     - returns: RequestBuilder<ManagerInvestmentPrograms> 
     */
    open class func apiManagerDashboardProgramsPostWithRequestBuilder(authorization: String, filter: ManagerDashboardProgramsFilter? = nil) -> RequestBuilder<ManagerInvestmentPrograms> {
        let path = "/api/manager/dashboard/programs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filter)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerInvestmentPrograms>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Dashboard statistic
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerDashboardStatisticGet(authorization: String, completion: @escaping ((_ data: ManagerDashboardStatistic?,_ error: Error?) -> Void)) {
        apiManagerDashboardStatisticGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Dashboard statistic
     - GET /api/manager/dashboard/statistic
     - examples: [{contentType=application/json, example={
  "programBalances" : [ {
    "balance" : 0.8008281904610115,
    "balanceUsd" : 6.027456183070403,
    "currency" : "Undefined",
    "title" : "title"
  }, {
    "balance" : 0.8008281904610115,
    "balanceUsd" : 6.027456183070403,
    "currency" : "Undefined",
    "title" : "title"
  } ],
  "endOfNextPeriod" : {
    "startOfPeriod" : "2000-01-23T04:56:07.000+00:00",
    "duration" : 5,
    "title" : "title"
  },
  "totalProfit" : 2.3021358869347655,
  "fundChart" : [ {
    "managerFund" : 7.061401241503109,
    "investorFund" : 9.301444243932576,
    "title" : "title",
    "profit" : 3.616076749251911
  }, {
    "managerFund" : 7.061401241503109,
    "investorFund" : 9.301444243932576,
    "title" : "title",
    "profit" : 3.616076749251911
  } ],
  "profitChart" : [ {
    "data" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "totalProfit" : 2.027123023002322
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "totalProfit" : 2.027123023002322
    } ],
    "title" : "title"
  }, {
    "data" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "totalProfit" : 2.027123023002322
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "totalProfit" : 2.027123023002322
    } ],
    "title" : "title"
  } ],
  "investorsCount" : 1,
  "investorsFund" : 5.962133916683182
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ManagerDashboardStatistic> 
     */
    open class func apiManagerDashboardStatisticGetWithRequestBuilder(authorization: String) -> RequestBuilder<ManagerDashboardStatistic> {
        let path = "/api/manager/dashboard/statistic"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerDashboardStatistic>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Cancel investment request
     
     - parameter requestId: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentCancelInvestmentRequestPost(requestId: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerInvestmentCancelInvestmentRequestPostWithRequestBuilder(requestId: requestId, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Cancel investment request
     - POST /api/manager/investment/cancelInvestmentRequest
     
     - parameter requestId: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerInvestmentCancelInvestmentRequestPostWithRequestBuilder(requestId: UUID, authorization: String) -> RequestBuilder<Void> {
        let path = "/api/manager/investment/cancelInvestmentRequest"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "requestId": requestId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Close existing investment program
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentClosePost(investmentProgramId: UUID, authorization: String, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerInvestmentClosePostWithRequestBuilder(investmentProgramId: investmentProgramId, authorization: authorization).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Close existing investment program
     - POST /api/manager/investment/close
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerInvestmentClosePostWithRequestBuilder(investmentProgramId: UUID, authorization: String) -> RequestBuilder<Void> {
        let path = "/api/manager/investment/close"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "investmentProgramId": investmentProgramId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Manager deposit in his own investment program
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentInvestPost(authorization: String, model: Invest? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerInvestmentInvestPostWithRequestBuilder(authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Manager deposit in his own investment program
     - POST /api/manager/investment/invest
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerInvestmentInvestPostWithRequestBuilder(authorization: String, model: Invest? = nil) -> RequestBuilder<Void> {
        let path = "/api/manager/investment/invest"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get investment program buy token model
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentProgramBuyTokensGet(investmentProgramId: UUID, authorization: String, completion: @escaping ((_ data: InvestmentProgramBuyToken?,_ error: Error?) -> Void)) {
        apiManagerInvestmentProgramBuyTokensGetWithRequestBuilder(investmentProgramId: investmentProgramId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get investment program buy token model
     - GET /api/manager/investmentProgram/buyTokens
     - examples: [{contentType=application/json, example={
  "startOfPeriod" : "2000-01-23T04:56:07.000+00:00",
  "periodDuration" : 5,
  "gvtRate" : 6.027456183070403,
  "manager" : {
    "country" : "country",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "avatar" : "avatar",
    "username" : "username"
  },
  "level" : 0,
  "endOfPeriod" : "2000-01-23T04:56:07.000+00:00",
  "logo" : "logo",
  "description" : "description",
  "currency" : "Undefined",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "title" : "title",
  "gvtWalletAmount" : 1.4658129805029452
}}]
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<InvestmentProgramBuyToken> 
     */
    open class func apiManagerInvestmentProgramBuyTokensGetWithRequestBuilder(investmentProgramId: UUID, authorization: String) -> RequestBuilder<InvestmentProgramBuyToken> {
        let path = "/api/manager/investmentProgram/buyTokens"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "investmentProgramId": investmentProgramId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InvestmentProgramBuyToken>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get investment program details by id
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentProgramGet(investmentProgramId: UUID, authorization: String? = nil, completion: @escaping ((_ data: InvestmentProgramViewModel?,_ error: Error?) -> Void)) {
        apiManagerInvestmentProgramGetWithRequestBuilder(investmentProgramId: investmentProgramId, authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get investment program details by id
     - GET /api/manager/investmentProgram
     - examples: [{contentType=application/json, example={
  "investmentProgram" : {
    "startOfPeriod" : "2000-01-23T04:56:07.000+00:00",
    "investedTokens" : 5.962133916683182,
    "profitFromProgram" : 2.3021358869347655,
    "availableInvestment" : 6.84685269835264,
    "description" : "description",
    "investedAmount" : 5.637376656633329,
    "title" : "title",
    "login" : "login",
    "isWithdrawEnable" : true,
    "balance" : 6.027456183070403,
    "logo" : "logo",
    "profitAvgPercent" : 7.386281948385884,
    "currency" : "Undefined",
    "feeSuccess" : 7.457744773683766,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "ownBalance" : 1.4658129805029452,
    "investorsCount" : 9,
    "periodDuration" : 3,
    "tradeIpfsHash" : "tradeIpfsHash",
    "feeManagement" : 1.1730742509559433,
    "manager" : {
      "country" : "country",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "username" : "username"
    },
    "hasNewRequests" : true,
    "level" : 0,
    "profitTotalPercent" : 1.2315135367772556,
    "profitTotalChange" : "Unchanged",
    "minAccountBalance" : 5.025004791520295,
    "isInvestEnable" : true,
    "token" : {
      "tokenSymbol" : "tokenSymbol",
      "initialPrice" : 9.965781217890562,
      "tokenName" : "tokenName"
    },
    "tradesCount" : 7,
    "isOwnProgram" : true,
    "volumeTotal" : 1.0246457001441578,
    "minAccountBalanceUsd" : 4.965218492984954,
    "isHistoryEnable" : true,
    "endOfPeriod" : "2000-01-23T04:56:07.000+00:00",
    "volumeTotalChange" : "Unchanged",
    "isEnabled" : true,
    "ipfsHash" : "ipfsHash",
    "profitTotal" : 4.145608029883936,
    "profitAvg" : 2.027123023002322,
    "volumeAvg" : 1.4894159098541704,
    "programStartDate" : "2000-01-23T04:56:07.000+00:00",
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "loss" : 6.84685269835264,
      "managerFund" : 1.2315135367772556,
      "totalProfit" : 7.457744773683766,
      "investorFund" : 1.0246457001441578,
      "profit" : 1.4894159098541704
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "loss" : 6.84685269835264,
      "managerFund" : 1.2315135367772556,
      "totalProfit" : 7.457744773683766,
      "investorFund" : 1.0246457001441578,
      "profit" : 1.4894159098541704
    } ],
    "profitDiagram" : {
      "managerFund" : 9.369310271410669,
      "profitIsPositive" : true,
      "profit" : 8.762042012749001,
      "investorsFund" : 6.683562403749608
    }
  }
}}]
     
     - parameter investmentProgramId: (query)  
     - parameter authorization: (header)  (optional)

     - returns: RequestBuilder<InvestmentProgramViewModel> 
     */
    open class func apiManagerInvestmentProgramGetWithRequestBuilder(investmentProgramId: UUID, authorization: String? = nil) -> RequestBuilder<InvestmentProgramViewModel> {
        let path = "/api/manager/investmentProgram"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "investmentProgramId": investmentProgramId
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InvestmentProgramViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get investment program's requests
     
     - parameter authorization: (header) JWT access token 
     - parameter filter: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentProgramRequestsPost(authorization: String, filter: InvestmentProgramRequestsFilter? = nil, completion: @escaping ((_ data: InvestmentProgramRequests?,_ error: Error?) -> Void)) {
        apiManagerInvestmentProgramRequestsPostWithRequestBuilder(authorization: authorization, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get investment program's requests
     - POST /api/manager/investmentProgram/requests
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "requests" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "canCancelRequest" : true,
    "amount" : 7.386281948385884,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Invest",
    "status" : "New"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "canCancelRequest" : true,
    "amount" : 7.386281948385884,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Invest",
    "status" : "New"
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter filter: (body)  (optional)

     - returns: RequestBuilder<InvestmentProgramRequests> 
     */
    open class func apiManagerInvestmentProgramRequestsPostWithRequestBuilder(authorization: String, filter: InvestmentProgramRequestsFilter? = nil) -> RequestBuilder<InvestmentProgramRequests> {
        let path = "/api/manager/investmentProgram/requests"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filter)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InvestmentProgramRequests>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get manager trades chart
     
     - parameter investmentProgramId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentProgramTradesChartGet(investmentProgramId: UUID, completion: @escaping ((_ data: TradesChartViewModel?,_ error: Error?) -> Void)) {
        apiManagerInvestmentProgramTradesChartGetWithRequestBuilder(investmentProgramId: investmentProgramId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get manager trades chart
     - GET /api/manager/investmentProgram/trades/chart
     - examples: [{contentType=application/json, example={
  "chart" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "profit" : 0.8008281904610115
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "profit" : 0.8008281904610115
  } ]
}}]
     
     - parameter investmentProgramId: (query)  

     - returns: RequestBuilder<TradesChartViewModel> 
     */
    open class func apiManagerInvestmentProgramTradesChartGetWithRequestBuilder(investmentProgramId: UUID) -> RequestBuilder<TradesChartViewModel> {
        let path = "/api/manager/investmentProgram/trades/chart"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "InvestmentProgramId": investmentProgramId
        ])
        

        let requestBuilder: RequestBuilder<TradesChartViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get manager trade history
     
     - parameter filter: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentProgramTradesPost(filter: TradesFilter? = nil, completion: @escaping ((_ data: TradesViewModel?,_ error: Error?) -> Void)) {
        apiManagerInvestmentProgramTradesPostWithRequestBuilder(filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get manager trade history
     - POST /api/manager/investmentProgram/trades
     - examples: [{contentType=application/json, example={
  "tradeServerType" : "Undefined",
  "total" : 0,
  "trades" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "symbol" : "symbol",
    "dateOpen" : "2000-01-23T04:56:07.000+00:00",
    "ticket" : 6,
    "login" : 0,
    "volume" : 1.4658129805029452,
    "entry" : "In",
    "priceClose" : 2.3021358869347655,
    "dateClose" : "2000-01-23T04:56:07.000+00:00",
    "price" : 7.061401241503109,
    "priceOpen" : 5.637376656633329,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profit" : 5.962133916683182,
    "direction" : "Buy"
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "symbol" : "symbol",
    "dateOpen" : "2000-01-23T04:56:07.000+00:00",
    "ticket" : 6,
    "login" : 0,
    "volume" : 1.4658129805029452,
    "entry" : "In",
    "priceClose" : 2.3021358869347655,
    "dateClose" : "2000-01-23T04:56:07.000+00:00",
    "price" : 7.061401241503109,
    "priceOpen" : 5.637376656633329,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profit" : 5.962133916683182,
    "direction" : "Buy"
  } ]
}}]
     
     - parameter filter: (body)  (optional)

     - returns: RequestBuilder<TradesViewModel> 
     */
    open class func apiManagerInvestmentProgramTradesPostWithRequestBuilder(filter: TradesFilter? = nil) -> RequestBuilder<TradesViewModel> {
        let path = "/api/manager/investmentProgram/trades"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filter)

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<TradesViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**
     Update investment program details
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentProgramUpdatePost(authorization: String, model: InvestmentProgramUpdate? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerInvestmentProgramUpdatePostWithRequestBuilder(authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update investment program details
     - POST /api/manager/investmentProgram/update
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerInvestmentProgramUpdatePostWithRequestBuilder(authorization: String, model: InvestmentProgramUpdate? = nil) -> RequestBuilder<Void> {
        let path = "/api/manager/investmentProgram/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get public investment program's list
     
     - parameter authorization: (header)  (optional)
     - parameter filter: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentProgramsPost(authorization: String? = nil, filter: InvestmentProgramsFilter? = nil, completion: @escaping ((_ data: InvestmentProgramsViewModel?,_ error: Error?) -> Void)) {
        apiManagerInvestmentProgramsPostWithRequestBuilder(authorization: authorization, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get public investment program's list
     - POST /api/manager/investmentPrograms
     - examples: [{contentType=application/json, example={
  "total" : 1,
  "investmentPrograms" : [ {
    "startOfPeriod" : "2000-01-23T04:56:07.000+00:00",
    "availableInvestment" : 2.027123023002322,
    "description" : "description",
    "title" : "title",
    "balance" : 6.027456183070403,
    "logo" : "logo",
    "profitAvgPercent" : 9.301444243932576,
    "currency" : "Undefined",
    "feeSuccess" : 4.145608029883936,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investorsCount" : 5,
    "periodDuration" : 5,
    "feeManagement" : 7.386281948385884,
    "manager" : {
      "country" : "country",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "username" : "username"
    },
    "hasNewRequests" : true,
    "level" : 0,
    "profitTotalPercent" : 3.616076749251911,
    "profitTotalChange" : "Unchanged",
    "isInvestEnable" : true,
    "tradesCount" : 1,
    "isOwnProgram" : true,
    "endOfPeriod" : "2000-01-23T04:56:07.000+00:00",
    "isEnabled" : true,
    "profitTotal" : 7.061401241503109,
    "profitAvg" : 2.3021358869347655,
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "loss" : 6.84685269835264,
      "managerFund" : 1.2315135367772556,
      "totalProfit" : 7.457744773683766,
      "investorFund" : 1.0246457001441578,
      "profit" : 1.4894159098541704
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "loss" : 6.84685269835264,
      "managerFund" : 1.2315135367772556,
      "totalProfit" : 7.457744773683766,
      "investorFund" : 1.0246457001441578,
      "profit" : 1.4894159098541704
    } ]
  }, {
    "startOfPeriod" : "2000-01-23T04:56:07.000+00:00",
    "availableInvestment" : 2.027123023002322,
    "description" : "description",
    "title" : "title",
    "balance" : 6.027456183070403,
    "logo" : "logo",
    "profitAvgPercent" : 9.301444243932576,
    "currency" : "Undefined",
    "feeSuccess" : 4.145608029883936,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investorsCount" : 5,
    "periodDuration" : 5,
    "feeManagement" : 7.386281948385884,
    "manager" : {
      "country" : "country",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "username" : "username"
    },
    "hasNewRequests" : true,
    "level" : 0,
    "profitTotalPercent" : 3.616076749251911,
    "profitTotalChange" : "Unchanged",
    "isInvestEnable" : true,
    "tradesCount" : 1,
    "isOwnProgram" : true,
    "endOfPeriod" : "2000-01-23T04:56:07.000+00:00",
    "isEnabled" : true,
    "profitTotal" : 7.061401241503109,
    "profitAvg" : 2.3021358869347655,
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "loss" : 6.84685269835264,
      "managerFund" : 1.2315135367772556,
      "totalProfit" : 7.457744773683766,
      "investorFund" : 1.0246457001441578,
      "profit" : 1.4894159098541704
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "loss" : 6.84685269835264,
      "managerFund" : 1.2315135367772556,
      "totalProfit" : 7.457744773683766,
      "investorFund" : 1.0246457001441578,
      "profit" : 1.4894159098541704
    } ]
  } ]
}}]
     
     - parameter authorization: (header)  (optional)
     - parameter filter: (body)  (optional)

     - returns: RequestBuilder<InvestmentProgramsViewModel> 
     */
    open class func apiManagerInvestmentProgramsPostWithRequestBuilder(authorization: String? = nil, filter: InvestmentProgramsFilter? = nil) -> RequestBuilder<InvestmentProgramsViewModel> {
        let path = "/api/manager/investmentPrograms"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filter)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<InvestmentProgramsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Manager withdrawal from his own investment program
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerInvestmentWithdrawPost(authorization: String, model: Invest? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerInvestmentWithdrawPostWithRequestBuilder(authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Manager withdrawal from his own investment program
     - POST /api/manager/investment/withdraw
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerInvestmentWithdrawPostWithRequestBuilder(authorization: String, model: Invest? = nil) -> RequestBuilder<Void> {
        let path = "/api/manager/investment/withdraw"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get full profile
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerProfileFullGet(authorization: String, completion: @escaping ((_ data: ProfileFullViewModel?,_ error: Error?) -> Void)) {
        apiManagerProfileFullGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get full profile
     - GET /api/manager/profile/full
     - examples: [{contentType=application/json, example={
  "birthday" : "2000-01-23T04:56:07.000+00:00",
  "lastName" : "lastName",
  "country" : "country",
  "address" : "address",
  "gender" : true,
  "documentType" : "documentType",
  "city" : "city",
  "documentNumber" : "documentNumber",
  "avatar" : "avatar",
  "userName" : "userName",
  "firstName" : "firstName",
  "phone" : "phone",
  "middleName" : "middleName",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "email" : "email"
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<ProfileFullViewModel> 
     */
    open class func apiManagerProfileFullGetWithRequestBuilder(authorization: String) -> RequestBuilder<ProfileFullViewModel> {
        let path = "/api/manager/profile/full"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ProfileFullViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get public profile
     
     - parameter userId: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerProfilePublicGet(userId: UUID, completion: @escaping ((_ data: ProfilePublicViewModel?,_ error: Error?) -> Void)) {
        apiManagerProfilePublicGetWithRequestBuilder(userId: userId).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get public profile
     - GET /api/manager/profile/public
     - examples: [{contentType=application/json, example={
  "country" : "country",
  "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
  "avatar" : "avatar",
  "username" : "username"
}}]
     
     - parameter userId: (query)  

     - returns: RequestBuilder<ProfilePublicViewModel> 
     */
    open class func apiManagerProfilePublicGetWithRequestBuilder(userId: UUID) -> RequestBuilder<ProfilePublicViewModel> {
        let path = "/api/manager/profile/public"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "userId": userId
        ])
        

        let requestBuilder: RequestBuilder<ProfilePublicViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Update profile
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerProfileUpdatePost(authorization: String, model: UpdateProfileViewModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerProfileUpdatePostWithRequestBuilder(authorization: authorization, model: model).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Update profile
     - POST /api/manager/profile/update
     
     - parameter authorization: (header) JWT access token 
     - parameter model: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerProfileUpdatePostWithRequestBuilder(authorization: String, model: UpdateProfileViewModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/manager/profile/update"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: model)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get eth address for GVT depositing
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerWalletAddressGet(authorization: String, completion: @escaping ((_ data: WalletAddressViewModel?,_ error: Error?) -> Void)) {
        apiManagerWalletAddressGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get eth address for GVT depositing
     - GET /api/manager/wallet/address
     - examples: [{contentType=application/json, example={
  "address" : "address",
  "currency" : "Undefined"
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<WalletAddressViewModel> 
     */
    open class func apiManagerWalletAddressGetWithRequestBuilder(authorization: String) -> RequestBuilder<WalletAddressViewModel> {
        let path = "/api/manager/wallet/address"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WalletAddressViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get user wallets
     
     - parameter authorization: (header) JWT access token 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerWalletGet(authorization: String, completion: @escaping ((_ data: WalletsViewModel?,_ error: Error?) -> Void)) {
        apiManagerWalletGetWithRequestBuilder(authorization: authorization).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get user wallets
     - GET /api/manager/wallet
     - examples: [{contentType=application/json, example={
  "wallets" : [ {
    "amount" : 0.8008281904610115,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  }, {
    "amount" : 0.8008281904610115,
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91"
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 

     - returns: RequestBuilder<WalletsViewModel> 
     */
    open class func apiManagerWalletGetWithRequestBuilder(authorization: String) -> RequestBuilder<WalletsViewModel> {
        let path = "/api/manager/wallet"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WalletsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get user wallet statistic
     
     - parameter authorization: (header) JWT access token 
     - parameter filter: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerWalletStatisticPost(authorization: String, filter: WalletStatisticFilter? = nil, completion: @escaping ((_ data: WalletStatistic?,_ error: Error?) -> Void)) {
        apiManagerWalletStatisticPostWithRequestBuilder(authorization: authorization, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get user wallet statistic
     - POST /api/manager/wallet/statistic
     - examples: [{contentType=application/json, example={
  "chart" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 0.8008281904610115
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "amount" : 0.8008281904610115
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter filter: (body)  (optional)

     - returns: RequestBuilder<WalletStatistic> 
     */
    open class func apiManagerWalletStatisticPostWithRequestBuilder(authorization: String, filter: WalletStatisticFilter? = nil) -> RequestBuilder<WalletStatistic> {
        let path = "/api/manager/wallet/statistic"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filter)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WalletStatistic>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Get user investment programs with tx
     
     - parameter authorization: (header) JWT access token 
     - parameter mask: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerWalletTransactionsInvestmentProgramsListGet(authorization: String, mask: String? = nil, completion: @escaping ((_ data: WalletInvestmentPrograms?,_ error: Error?) -> Void)) {
        apiManagerWalletTransactionsInvestmentProgramsListGetWithRequestBuilder(authorization: authorization, mask: mask).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get user investment programs with tx
     - GET /api/manager/wallet/transactions/investmentProgramsList
     - examples: [{contentType=application/json, example={
  "investmentPrograms" : [ {
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title"
  }, {
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title"
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter mask: (query)  (optional)

     - returns: RequestBuilder<WalletInvestmentPrograms> 
     */
    open class func apiManagerWalletTransactionsInvestmentProgramsListGetWithRequestBuilder(authorization: String, mask: String? = nil) -> RequestBuilder<WalletInvestmentPrograms> {
        let path = "/api/manager/wallet/transactions/investmentProgramsList"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "mask": mask
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WalletInvestmentPrograms>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Get user wallet transactions
     
     - parameter authorization: (header) JWT access token 
     - parameter filter: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerWalletTransactionsPost(authorization: String, filter: TransactionsFilter? = nil, completion: @escaping ((_ data: WalletTransactionsViewModel?,_ error: Error?) -> Void)) {
        apiManagerWalletTransactionsPostWithRequestBuilder(authorization: authorization, filter: filter).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Get user wallet transactions
     - POST /api/manager/wallet/transactions
     - examples: [{contentType=application/json, example={
  "total" : 6,
  "transactions" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "walletId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investmentProgramRequest" : {
      "type" : "Invest",
      "status" : "New"
    },
    "amount" : 0.8008281904610115,
    "investmentProgram" : {
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title"
    },
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Deposit",
    "paymentTx" : {
      "address" : "address",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "hash" : "hash"
    }
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "walletId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "investmentProgramRequest" : {
      "type" : "Invest",
      "status" : "New"
    },
    "amount" : 0.8008281904610115,
    "investmentProgram" : {
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "title" : "title"
    },
    "currency" : "Undefined",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Deposit",
    "paymentTx" : {
      "address" : "address",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "hash" : "hash"
    }
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter filter: (body)  (optional)

     - returns: RequestBuilder<WalletTransactionsViewModel> 
     */
    open class func apiManagerWalletTransactionsPostWithRequestBuilder(authorization: String, filter: TransactionsFilter? = nil) -> RequestBuilder<WalletTransactionsViewModel> {
        let path = "/api/manager/wallet/transactions"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: filter)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<WalletTransactionsViewModel>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     Withdraw request
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func apiManagerWalletWithdrawRequestPost(authorization: String, request: WalletWithdrawRequestModel? = nil, completion: @escaping ((_ error: Error?) -> Void)) {
        apiManagerWalletWithdrawRequestPostWithRequestBuilder(authorization: authorization, request: request).execute { (response, error) -> Void in
            completion(error);
        }
    }


    /**
     Withdraw request
     - POST /api/manager/wallet/withdrawRequest
     
     - parameter authorization: (header) JWT access token 
     - parameter request: (body)  (optional)

     - returns: RequestBuilder<Void> 
     */
    open class func apiManagerWalletWithdrawRequestPostWithRequestBuilder(authorization: String, request: WalletWithdrawRequestModel? = nil) -> RequestBuilder<Void> {
        let path = "/api/manager/wallet/withdrawRequest"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: request)

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void>.Type = SwaggerClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

}
