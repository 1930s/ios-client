//
// ManagerAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation
import Alamofire



open class ManagerAPI {
    /**
     * enum for parameter type
     */
    public enum ModelType_v10ManagerEventsGet: String { 
        case assetStarted = "AssetStarted"
        case programPeriodStats = "ProgramPeriodStats"
        case programPeriodEnds = "ProgramPeriodEnds"
        case investorInvest = "InvestorInvest"
        case investorWithdraw = "InvestorWithdraw"
        case managerInvest = "ManagerInvest"
        case managerWithdraw = "ManagerWithdraw"
        case assetFinished = "AssetFinished"
    }

    /**
     * enum for parameter assetType
     */
    public enum AssetType_v10ManagerEventsGet: String { 
        case all = "All"
        case program = "Program"
        case fund = "Fund"
    }

    /**
     Manager events
     
     - parameter authorization: (header) JWT access token 
     - parameter assetId: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter assetType: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerEventsGet(authorization: String, assetId: UUID? = nil, from: Date? = nil, to: Date? = nil, type: ModelType_v10ManagerEventsGet? = nil, assetType: AssetType_v10ManagerEventsGet? = nil, completion: @escaping ((_ data: ManagerPortfolioEvents?,_ error: Error?) -> Void)) {
        v10ManagerEventsGetWithRequestBuilder(authorization: authorization, assetId: assetId, from: from, to: to, type: type, assetType: assetType).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Manager events
     - GET /v1.0/manager/events
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "events" : [ {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "programType" : "Program",
    "profitPercent" : 5.637376656633329,
    "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "logo" : "logo",
    "description" : "description",
    "currency" : "Undefined",
    "feeValue" : 5.962133916683182,
    "title" : "title",
    "type" : "AssetStarted",
    "value" : 1.4658129805029452
  }, {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "programType" : "Program",
    "profitPercent" : 5.637376656633329,
    "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "logo" : "logo",
    "description" : "description",
    "currency" : "Undefined",
    "feeValue" : 5.962133916683182,
    "title" : "title",
    "type" : "AssetStarted",
    "value" : 1.4658129805029452
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter assetId: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter type: (query)  (optional)
     - parameter assetType: (query)  (optional)

     - returns: RequestBuilder<ManagerPortfolioEvents> 
     */
    open class func v10ManagerEventsGetWithRequestBuilder(authorization: String, assetId: UUID? = nil, from: Date? = nil, to: Date? = nil, type: ModelType_v10ManagerEventsGet? = nil, assetType: AssetType_v10ManagerEventsGet? = nil) -> RequestBuilder<ManagerPortfolioEvents> {
        let path = "/v1.0/manager/events"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "AssetId": assetId, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "Type": type?.rawValue, 
            "AssetType": assetType?.rawValue
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerPortfolioEvents>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_v10ManagerFundsGet: String { 
        case byTitleAsc = "ByTitleAsc"
        case byTitleDesc = "ByTitleDesc"
        case byShareAsc = "ByShareAsc"
        case byShareDesc = "ByShareDesc"
        case byInvestmentsAsc = "ByInvestmentsAsc"
        case byInvestmentsDesc = "ByInvestmentsDesc"
        case byWithdrawalsAsc = "ByWithdrawalsAsc"
        case byWithdrawalsDesc = "ByWithdrawalsDesc"
        case byBalanceAsc = "ByBalanceAsc"
        case byBalanceDesc = "ByBalanceDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
    }

    /**
     Manager funds
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter pointsCount: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerFundsGet(authorization: String, sorting: Sorting_v10ManagerFundsGet? = nil, from: Date? = nil, to: Date? = nil, pointsCount: Int? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ManagerFunds?,_ error: Error?) -> Void)) {
        v10ManagerFundsGetWithRequestBuilder(authorization: authorization, sorting: sorting, from: from, to: to, pointsCount: pointsCount, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Manager funds
     - GET /v1.0/manager/funds
     - examples: [{contentType=application/json, example={
  "total" : 0,
  "funds" : [ {
    "level" : 0,
    "withdrawalsCount" : 2,
    "title" : "title",
    "investments" : 1.4658129805029452,
    "url" : "url",
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "withdrawals" : 5.637376656633329,
    "balance" : 7.061401241503109,
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "logo" : "logo",
    "share" : 6.027456183070403,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profit" : 3.616076749251911,
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "investmentsCount" : 5,
    "investorsCount" : 9
  }, {
    "level" : 0,
    "withdrawalsCount" : 2,
    "title" : "title",
    "investments" : 1.4658129805029452,
    "url" : "url",
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "withdrawals" : 5.637376656633329,
    "balance" : 7.061401241503109,
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "logo" : "logo",
    "share" : 6.027456183070403,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profit" : 3.616076749251911,
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "investmentsCount" : 5,
    "investorsCount" : 9
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter pointsCount: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ManagerFunds> 
     */
    open class func v10ManagerFundsGetWithRequestBuilder(authorization: String, sorting: Sorting_v10ManagerFundsGet? = nil, from: Date? = nil, to: Date? = nil, pointsCount: Int? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ManagerFunds> {
        let path = "/v1.0/manager/funds"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Sorting": sorting?.rawValue, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "PointsCount": pointsCount?.encodeToJSON(), 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerFunds>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     Manager dashboard
     
     - parameter authorization: (header) JWT access token 
     - parameter eventsTake: (query)  (optional)
     - parameter requestsSkip: (query)  (optional)
     - parameter requestsTake: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerGet(authorization: String, eventsTake: Int? = nil, requestsSkip: Int? = nil, requestsTake: Int? = nil, completion: @escaping ((_ data: ManagerDashboard?,_ error: Error?) -> Void)) {
        v10ManagerGetWithRequestBuilder(authorization: authorization, eventsTake: eventsTake, requestsSkip: requestsSkip, requestsTake: requestsTake).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Manager dashboard
     - GET /v1.0/manager
     - examples: [{contentType=application/json, example={
  "profile" : {
    "overview" : { },
    "managerProfile" : {
      "assets" : [ "assets", "assets" ],
      "about" : "about",
      "regDate" : "2000-01-23T04:56:07.000+00:00",
      "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "avatar" : "avatar",
      "url" : "url",
      "username" : "username"
    },
    "programsCount" : 0,
    "fundsCount" : 6
  },
  "allAssets" : [ {
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "type" : "Program"
  }, {
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "title" : "title",
    "type" : "Program"
  } ],
  "fundChart" : {
    "profitChangePercent" : 5.944895607614016,
    "calmarRatio" : 1.284659006116532,
    "timeframeGvtProfit" : 6.878052220127876,
    "timeframeUsdProfit" : 6.683562403749608,
    "maxDrawdown" : 2.8841621266687802,
    "equityChart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "investors" : 6,
    "totalGvtProfit" : 6.778324963048013,
    "sortinoRatio" : 6.965117697638846,
    "rebalances" : 8,
    "balance" : 9.018348186070783,
    "rate" : 6.704019297950036,
    "lastPeriodEnds" : "2000-01-23T04:56:07.000+00:00",
    "totalUsdProfit" : 9.369310271410669,
    "sharpeRatio" : 3.5571952270680973,
    "lastPeriodStarts" : "2000-01-23T04:56:07.000+00:00"
  },
  "requests" : {
    "date" : "2000-01-23T04:56:07.000+00:00",
    "canCancelRequest" : true,
    "programType" : "Program",
    "color" : "color",
    "fundWithdrawPercent" : 6.438423552598547,
    "logo" : "logo",
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "type" : "Invest",
    "title" : "title",
    "value" : 9.018348186070783,
    "programId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "status" : "New"
  },
  "events" : {
    "total" : 2,
    "events" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "programType" : "Program",
      "profitPercent" : 5.637376656633329,
      "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "logo" : "logo",
      "description" : "description",
      "currency" : "Undefined",
      "feeValue" : 5.962133916683182,
      "title" : "title",
      "type" : "AssetStarted",
      "value" : 1.4658129805029452
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "programType" : "Program",
      "profitPercent" : 5.637376656633329,
      "assetId" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
      "logo" : "logo",
      "description" : "description",
      "currency" : "Undefined",
      "feeValue" : 5.962133916683182,
      "title" : "title",
      "type" : "AssetStarted",
      "value" : 1.4658129805029452
    } ]
  },
  "programChart" : {
    "profitFactor" : 4.145608029883936,
    "profitChangePercent" : 5.025004791520295,
    "calmarRatio" : 6.84685269835264,
    "timeframeGvtProfit" : 4.965218492984954,
    "timeframeProgramCurrencyProfit" : 9.301444243932576,
    "trades" : 3,
    "maxDrawdown" : 7.457744773683766,
    "equityChart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "investors" : 1,
    "totalGvtProfit" : 1.1730742509559433,
    "sortinoRatio" : 1.4894159098541704,
    "pnLChart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "balance" : 7.386281948385884,
    "programCurrency" : "Undefined",
    "rate" : 9.965781217890562,
    "totalProgramCurrencyProfit" : 7.061401241503109,
    "successTradesPercent" : 2.027123023002322,
    "lastPeriodEnds" : "2000-01-23T04:56:07.000+00:00",
    "periods" : [ {
      "dateTo" : "2000-01-23T04:56:07.000+00:00",
      "dateFrom" : "2000-01-23T04:56:07.000+00:00"
    }, {
      "dateTo" : "2000-01-23T04:56:07.000+00:00",
      "dateFrom" : "2000-01-23T04:56:07.000+00:00"
    } ],
    "sharpeRatio" : 1.0246457001441578,
    "lastPeriodStarts" : "2000-01-23T04:56:07.000+00:00"
  }
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter eventsTake: (query)  (optional)
     - parameter requestsSkip: (query)  (optional)
     - parameter requestsTake: (query)  (optional)

     - returns: RequestBuilder<ManagerDashboard> 
     */
    open class func v10ManagerGetWithRequestBuilder(authorization: String, eventsTake: Int? = nil, requestsSkip: Int? = nil, requestsTake: Int? = nil) -> RequestBuilder<ManagerDashboard> {
        let path = "/v1.0/manager"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "eventsTake": eventsTake?.encodeToJSON(), 
            "requestsSkip": requestsSkip?.encodeToJSON(), 
            "requestsTake": requestsTake?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerDashboard>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

    /**
     * enum for parameter sorting
     */
    public enum Sorting_v10ManagerProgramsGet: String { 
        case byTitleAsc = "ByTitleAsc"
        case byTitleDesc = "ByTitleDesc"
        case byShareAsc = "ByShareAsc"
        case byShareDesc = "ByShareDesc"
        case byInvestmentsAsc = "ByInvestmentsAsc"
        case byInvestmentsDesc = "ByInvestmentsDesc"
        case byWithdrawalsAsc = "ByWithdrawalsAsc"
        case byWithdrawalsDesc = "ByWithdrawalsDesc"
        case byTimeLeftAsc = "ByTimeLeftAsc"
        case byTimeLeftDesc = "ByTimeLeftDesc"
        case byBalanceAsc = "ByBalanceAsc"
        case byBalanceDesc = "ByBalanceDesc"
        case byProfitAsc = "ByProfitAsc"
        case byProfitDesc = "ByProfitDesc"
    }

    /**
     Manager programs
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter pointsCount: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func v10ManagerProgramsGet(authorization: String, sorting: Sorting_v10ManagerProgramsGet? = nil, from: Date? = nil, to: Date? = nil, pointsCount: Int? = nil, skip: Int? = nil, take: Int? = nil, completion: @escaping ((_ data: ManagerPrograms?,_ error: Error?) -> Void)) {
        v10ManagerProgramsGetWithRequestBuilder(authorization: authorization, sorting: sorting, from: from, to: to, pointsCount: pointsCount, skip: skip, take: take).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }


    /**
     Manager programs
     - GET /v1.0/manager/programs
     - examples: [{contentType=application/json, example={
  "total" : 2,
  "programs" : [ {
    "level" : 0,
    "withdrawalsCount" : 2,
    "title" : "title",
    "investments" : 1.4658129805029452,
    "url" : "url",
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "withdrawals" : 5.637376656633329,
    "balance" : 7.061401241503109,
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "logo" : "logo",
    "share" : 6.027456183070403,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profit" : 3.616076749251911,
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "investmentsCount" : 5,
    "investorsCount" : 9
  }, {
    "level" : 0,
    "withdrawalsCount" : 2,
    "title" : "title",
    "investments" : 1.4658129805029452,
    "url" : "url",
    "periodStarts" : "2000-01-23T04:56:07.000+00:00",
    "withdrawals" : 5.637376656633329,
    "balance" : 7.061401241503109,
    "periodEnds" : "2000-01-23T04:56:07.000+00:00",
    "logo" : "logo",
    "share" : 6.027456183070403,
    "id" : "046b6c7f-0b8a-43b9-b35d-6489e6daee91",
    "profit" : 3.616076749251911,
    "chart" : [ {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    }, {
      "date" : "2000-01-23T04:56:07.000+00:00",
      "value" : 3.616076749251911
    } ],
    "investmentsCount" : 5,
    "investorsCount" : 9
  } ]
}}]
     
     - parameter authorization: (header) JWT access token 
     - parameter sorting: (query)  (optional)
     - parameter from: (query)  (optional)
     - parameter to: (query)  (optional)
     - parameter pointsCount: (query)  (optional)
     - parameter skip: (query)  (optional)
     - parameter take: (query)  (optional)

     - returns: RequestBuilder<ManagerPrograms> 
     */
    open class func v10ManagerProgramsGetWithRequestBuilder(authorization: String, sorting: Sorting_v10ManagerProgramsGet? = nil, from: Date? = nil, to: Date? = nil, pointsCount: Int? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<ManagerPrograms> {
        let path = "/v1.0/manager/programs"
        let URLString = SwaggerClientAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "Sorting": sorting?.rawValue, 
            "From": from?.encodeToJSON(), 
            "To": to?.encodeToJSON(), 
            "PointsCount": pointsCount?.encodeToJSON(), 
            "Skip": skip?.encodeToJSON(), 
            "Take": take?.encodeToJSON()
        ])
        
        let nillableHeaders: [String: Any?] = [
            "Authorization": authorization
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ManagerPrograms>.Type = SwaggerClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters)
    }

}
