//
// ProgramsInfo.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProgramsInfo: Codable {

    public var managerProgramInvestment: Double?
    public var managerMaxEntryFee: Double?
    public var managerMaxSuccessFee: Double?
    public var managerFundInvestment: Double?
    public var managerMaxExitFee: Double?
    public var periods: [Int]?


    
    public init(managerProgramInvestment: Double?, managerMaxEntryFee: Double?, managerMaxSuccessFee: Double?, managerFundInvestment: Double?, managerMaxExitFee: Double?, periods: [Int]?) {
        self.managerProgramInvestment = managerProgramInvestment
        self.managerMaxEntryFee = managerMaxEntryFee
        self.managerMaxSuccessFee = managerMaxSuccessFee
        self.managerFundInvestment = managerFundInvestment
        self.managerMaxExitFee = managerMaxExitFee
        self.periods = periods
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(managerProgramInvestment, forKey: "managerProgramInvestment")
        try container.encodeIfPresent(managerMaxEntryFee, forKey: "managerMaxEntryFee")
        try container.encodeIfPresent(managerMaxSuccessFee, forKey: "managerMaxSuccessFee")
        try container.encodeIfPresent(managerFundInvestment, forKey: "managerFundInvestment")
        try container.encodeIfPresent(managerMaxExitFee, forKey: "managerMaxExitFee")
        try container.encodeIfPresent(periods, forKey: "periods")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        managerProgramInvestment = try container.decodeIfPresent(Double.self, forKey: "managerProgramInvestment")
        managerMaxEntryFee = try container.decodeIfPresent(Double.self, forKey: "managerMaxEntryFee")
        managerMaxSuccessFee = try container.decodeIfPresent(Double.self, forKey: "managerMaxSuccessFee")
        managerFundInvestment = try container.decodeIfPresent(Double.self, forKey: "managerFundInvestment")
        managerMaxExitFee = try container.decodeIfPresent(Double.self, forKey: "managerMaxExitFee")
        periods = try container.decodeIfPresent([Int].self, forKey: "periods")
    }
}

