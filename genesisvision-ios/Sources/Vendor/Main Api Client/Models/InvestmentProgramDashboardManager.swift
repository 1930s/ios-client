//
// InvestmentProgramDashboardManager.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class InvestmentProgramDashboardManager: Codable {

    public enum Currency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usd = "USD"
        case eur = "EUR"
    }
    public var id: UUID?
    public var title: String?
    public var description: String?
    public var level: Int?
    public var logo: String?
    public var balance: Double?
    public var currency: Currency?
    public var tradesCount: Int?
    public var periodDuration: Int?
    public var investorsCount: Int?
    public var isEnabled: Bool?
    public var startOfPeriod: Date?
    public var profitTotal: Double?
    public var profitTotalGvt: Double?
    public var profitCurrent: Double?
    public var isInvestEnable: Bool?
    public var isWithdrawEnable: Bool?
    public var token: Token?
    public var ownBalance: Double?
    public var minAccountBalanceUsd: Double?
    public var minAccountBalance: Double?
    public var login: String?
    public var canCloseProgram: Bool?
    public var canClosePeriod: Bool?
    public var isFavorite: Bool?
    public var isPending: Bool?
    public var isTournament: Bool?
    public var roundNumber: Int?
    public var place: Int?


    
    public init(id: UUID?, title: String?, description: String?, level: Int?, logo: String?, balance: Double?, currency: Currency?, tradesCount: Int?, periodDuration: Int?, investorsCount: Int?, isEnabled: Bool?, startOfPeriod: Date?, profitTotal: Double?, profitTotalGvt: Double?, profitCurrent: Double?, isInvestEnable: Bool?, isWithdrawEnable: Bool?, token: Token?, ownBalance: Double?, minAccountBalanceUsd: Double?, minAccountBalance: Double?, login: String?, canCloseProgram: Bool?, canClosePeriod: Bool?, isFavorite: Bool?, isPending: Bool?, isTournament: Bool?, roundNumber: Int?, place: Int?) {
        self.id = id
        self.title = title
        self.description = description
        self.level = level
        self.logo = logo
        self.balance = balance
        self.currency = currency
        self.tradesCount = tradesCount
        self.periodDuration = periodDuration
        self.investorsCount = investorsCount
        self.isEnabled = isEnabled
        self.startOfPeriod = startOfPeriod
        self.profitTotal = profitTotal
        self.profitTotalGvt = profitTotalGvt
        self.profitCurrent = profitCurrent
        self.isInvestEnable = isInvestEnable
        self.isWithdrawEnable = isWithdrawEnable
        self.token = token
        self.ownBalance = ownBalance
        self.minAccountBalanceUsd = minAccountBalanceUsd
        self.minAccountBalance = minAccountBalance
        self.login = login
        self.canCloseProgram = canCloseProgram
        self.canClosePeriod = canClosePeriod
        self.isFavorite = isFavorite
        self.isPending = isPending
        self.isTournament = isTournament
        self.roundNumber = roundNumber
        self.place = place
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(level, forKey: "level")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(balance, forKey: "balance")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(tradesCount, forKey: "tradesCount")
        try container.encodeIfPresent(periodDuration, forKey: "periodDuration")
        try container.encodeIfPresent(investorsCount, forKey: "investorsCount")
        try container.encodeIfPresent(isEnabled, forKey: "isEnabled")
        try container.encodeIfPresent(startOfPeriod, forKey: "startOfPeriod")
        try container.encodeIfPresent(profitTotal, forKey: "profitTotal")
        try container.encodeIfPresent(profitTotalGvt, forKey: "profitTotalGvt")
        try container.encodeIfPresent(profitCurrent, forKey: "profitCurrent")
        try container.encodeIfPresent(isInvestEnable, forKey: "isInvestEnable")
        try container.encodeIfPresent(isWithdrawEnable, forKey: "isWithdrawEnable")
        try container.encodeIfPresent(token, forKey: "token")
        try container.encodeIfPresent(ownBalance, forKey: "ownBalance")
        try container.encodeIfPresent(minAccountBalanceUsd, forKey: "minAccountBalanceUsd")
        try container.encodeIfPresent(minAccountBalance, forKey: "minAccountBalance")
        try container.encodeIfPresent(login, forKey: "login")
        try container.encodeIfPresent(canCloseProgram, forKey: "canCloseProgram")
        try container.encodeIfPresent(canClosePeriod, forKey: "canClosePeriod")
        try container.encodeIfPresent(isFavorite, forKey: "isFavorite")
        try container.encodeIfPresent(isPending, forKey: "isPending")
        try container.encodeIfPresent(isTournament, forKey: "isTournament")
        try container.encodeIfPresent(roundNumber, forKey: "roundNumber")
        try container.encodeIfPresent(place, forKey: "place")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        level = try container.decodeIfPresent(Int.self, forKey: "level")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        balance = try container.decodeIfPresent(Double.self, forKey: "balance")
        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
        tradesCount = try container.decodeIfPresent(Int.self, forKey: "tradesCount")
        periodDuration = try container.decodeIfPresent(Int.self, forKey: "periodDuration")
        investorsCount = try container.decodeIfPresent(Int.self, forKey: "investorsCount")
        isEnabled = try container.decodeIfPresent(Bool.self, forKey: "isEnabled")
        startOfPeriod = try container.decodeIfPresent(Date.self, forKey: "startOfPeriod")
        profitTotal = try container.decodeIfPresent(Double.self, forKey: "profitTotal")
        profitTotalGvt = try container.decodeIfPresent(Double.self, forKey: "profitTotalGvt")
        profitCurrent = try container.decodeIfPresent(Double.self, forKey: "profitCurrent")
        isInvestEnable = try container.decodeIfPresent(Bool.self, forKey: "isInvestEnable")
        isWithdrawEnable = try container.decodeIfPresent(Bool.self, forKey: "isWithdrawEnable")
        token = try container.decodeIfPresent(Token.self, forKey: "token")
        ownBalance = try container.decodeIfPresent(Double.self, forKey: "ownBalance")
        minAccountBalanceUsd = try container.decodeIfPresent(Double.self, forKey: "minAccountBalanceUsd")
        minAccountBalance = try container.decodeIfPresent(Double.self, forKey: "minAccountBalance")
        login = try container.decodeIfPresent(String.self, forKey: "login")
        canCloseProgram = try container.decodeIfPresent(Bool.self, forKey: "canCloseProgram")
        canClosePeriod = try container.decodeIfPresent(Bool.self, forKey: "canClosePeriod")
        isFavorite = try container.decodeIfPresent(Bool.self, forKey: "isFavorite")
        isPending = try container.decodeIfPresent(Bool.self, forKey: "isPending")
        isTournament = try container.decodeIfPresent(Bool.self, forKey: "isTournament")
        roundNumber = try container.decodeIfPresent(Int.self, forKey: "roundNumber")
        place = try container.decodeIfPresent(Int.self, forKey: "place")
    }
}

