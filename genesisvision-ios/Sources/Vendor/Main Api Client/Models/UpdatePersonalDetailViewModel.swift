//
// UpdatePersonalDetailViewModel.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class UpdatePersonalDetailViewModel: Codable {

    public var firstName: String?
    public var middleName: String?
    public var lastName: String?
    public var birthday: Date?
    public var citizenship: String?
    public var gender: Bool?
    public var documentId: String?
    public var phoneNumber: String?
    public var country: String?
    public var city: String?
    public var address: String?
    public var index: String?


    
    public init(firstName: String?, middleName: String?, lastName: String?, birthday: Date?, citizenship: String?, gender: Bool?, documentId: String?, phoneNumber: String?, country: String?, city: String?, address: String?, index: String?) {
        self.firstName = firstName
        self.middleName = middleName
        self.lastName = lastName
        self.birthday = birthday
        self.citizenship = citizenship
        self.gender = gender
        self.documentId = documentId
        self.phoneNumber = phoneNumber
        self.country = country
        self.city = city
        self.address = address
        self.index = index
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(firstName, forKey: "firstName")
        try container.encodeIfPresent(middleName, forKey: "middleName")
        try container.encodeIfPresent(lastName, forKey: "lastName")
        try container.encodeIfPresent(birthday, forKey: "birthday")
        try container.encodeIfPresent(citizenship, forKey: "citizenship")
        try container.encodeIfPresent(gender, forKey: "gender")
        try container.encodeIfPresent(documentId, forKey: "documentId")
        try container.encodeIfPresent(phoneNumber, forKey: "phoneNumber")
        try container.encodeIfPresent(country, forKey: "country")
        try container.encodeIfPresent(city, forKey: "city")
        try container.encodeIfPresent(address, forKey: "address")
        try container.encodeIfPresent(index, forKey: "index")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        firstName = try container.decodeIfPresent(String.self, forKey: "firstName")
        middleName = try container.decodeIfPresent(String.self, forKey: "middleName")
        lastName = try container.decodeIfPresent(String.self, forKey: "lastName")
        birthday = try container.decodeIfPresent(Date.self, forKey: "birthday")
        citizenship = try container.decodeIfPresent(String.self, forKey: "citizenship")
        gender = try container.decodeIfPresent(Bool.self, forKey: "gender")
        documentId = try container.decodeIfPresent(String.self, forKey: "documentId")
        phoneNumber = try container.decodeIfPresent(String.self, forKey: "phoneNumber")
        country = try container.decodeIfPresent(String.self, forKey: "country")
        city = try container.decodeIfPresent(String.self, forKey: "city")
        address = try container.decodeIfPresent(String.self, forKey: "address")
        index = try container.decodeIfPresent(String.self, forKey: "index")
    }
}

