//
// BrokerTradeServer.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class BrokerTradeServer: Codable {

    public enum ModelType: String, Codable { 
        case undefined = "Undefined"
        case metaTrader4 = "MetaTrader4"
        case metaTrader5 = "MetaTrader5"
        case ninjaTrader = "NinjaTrader"
        case ctrader = "cTrader"
        case rumus = "Rumus"
        case metastock = "Metastock"
    }
    public var id: UUID?
    public var brokerId: UUID?
    public var name: String?
    public var host: String?
    public var type: ModelType?
    public var broker: Broker?
    public var registrationDate: Date?
    public var leverages: [Int]?


    
    public init(id: UUID?, brokerId: UUID?, name: String?, host: String?, type: ModelType?, broker: Broker?, registrationDate: Date?, leverages: [Int]?) {
        self.id = id
        self.brokerId = brokerId
        self.name = name
        self.host = host
        self.type = type
        self.broker = broker
        self.registrationDate = registrationDate
        self.leverages = leverages
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(brokerId, forKey: "brokerId")
        try container.encodeIfPresent(name, forKey: "name")
        try container.encodeIfPresent(host, forKey: "host")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(broker, forKey: "broker")
        try container.encodeIfPresent(registrationDate, forKey: "registrationDate")
        try container.encodeIfPresent(leverages, forKey: "leverages")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        brokerId = try container.decodeIfPresent(UUID.self, forKey: "brokerId")
        name = try container.decodeIfPresent(String.self, forKey: "name")
        host = try container.decodeIfPresent(String.self, forKey: "host")
        type = try container.decodeIfPresent(ModelType.self, forKey: "type")
        broker = try container.decodeIfPresent(Broker.self, forKey: "broker")
        registrationDate = try container.decodeIfPresent(Date.self, forKey: "registrationDate")
        leverages = try container.decodeIfPresent([Int].self, forKey: "leverages")
    }
}

