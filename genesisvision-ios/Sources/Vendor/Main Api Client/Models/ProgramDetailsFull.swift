//
// ProgramDetailsFull.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProgramDetailsFull: Codable {

    public enum Currency: String, Codable { 
        case eth = "ETH"
        case gvt = "GVT"
        case btc = "BTC"
        case undefined = "Undefined"
        case ada = "ADA"
        case usd = "USD"
        case eur = "EUR"
    }
    public enum Status: String, Codable { 
        case _none = "None"
        case pending = "Pending"
        case errorCreating = "ErrorCreating"
        case active = "Active"
        case closed = "Closed"
        case archived = "Archived"
        case closedDueToInactivity = "ClosedDueToInactivity"
    }
    public var currency: Currency?
    public var level: Int?
    public var periodDuration: Int?
    public var periodStarts: Date?
    public var periodEnds: Date?
    public var entryFee: Double?
    public var successFee: Double?
    public var isReinvesting: Bool?
    public var availableInvestment: Double?
    public var statistic: ProgramStatistic?
    /** Fields for authorized user */
    public var personalProgramDetails: PersonalProgramDetailsFull?
    public var id: UUID?
    public var logo: String?
    public var url: String?
    public var description: String?
    public var title: String?
    public var status: Status?
    public var manager: ProfilePublic?


    
    public init(currency: Currency?, level: Int?, periodDuration: Int?, periodStarts: Date?, periodEnds: Date?, entryFee: Double?, successFee: Double?, isReinvesting: Bool?, availableInvestment: Double?, statistic: ProgramStatistic?, personalProgramDetails: PersonalProgramDetailsFull?, id: UUID?, logo: String?, url: String?, description: String?, title: String?, status: Status?, manager: ProfilePublic?) {
        self.currency = currency
        self.level = level
        self.periodDuration = periodDuration
        self.periodStarts = periodStarts
        self.periodEnds = periodEnds
        self.entryFee = entryFee
        self.successFee = successFee
        self.isReinvesting = isReinvesting
        self.availableInvestment = availableInvestment
        self.statistic = statistic
        self.personalProgramDetails = personalProgramDetails
        self.id = id
        self.logo = logo
        self.url = url
        self.description = description
        self.title = title
        self.status = status
        self.manager = manager
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(level, forKey: "level")
        try container.encodeIfPresent(periodDuration, forKey: "periodDuration")
        try container.encodeIfPresent(periodStarts, forKey: "periodStarts")
        try container.encodeIfPresent(periodEnds, forKey: "periodEnds")
        try container.encodeIfPresent(entryFee, forKey: "entryFee")
        try container.encodeIfPresent(successFee, forKey: "successFee")
        try container.encodeIfPresent(isReinvesting, forKey: "isReinvesting")
        try container.encodeIfPresent(availableInvestment, forKey: "availableInvestment")
        try container.encodeIfPresent(statistic, forKey: "statistic")
        try container.encodeIfPresent(personalProgramDetails, forKey: "personalProgramDetails")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(status, forKey: "status")
        try container.encodeIfPresent(manager, forKey: "manager")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
        level = try container.decodeIfPresent(Int.self, forKey: "level")
        periodDuration = try container.decodeIfPresent(Int.self, forKey: "periodDuration")
        periodStarts = try container.decodeIfPresent(Date.self, forKey: "periodStarts")
        periodEnds = try container.decodeIfPresent(Date.self, forKey: "periodEnds")
        entryFee = try container.decodeIfPresent(Double.self, forKey: "entryFee")
        successFee = try container.decodeIfPresent(Double.self, forKey: "successFee")
        isReinvesting = try container.decodeIfPresent(Bool.self, forKey: "isReinvesting")
        availableInvestment = try container.decodeIfPresent(Double.self, forKey: "availableInvestment")
        statistic = try container.decodeIfPresent(ProgramStatistic.self, forKey: "statistic")
        personalProgramDetails = try container.decodeIfPresent(PersonalProgramDetailsFull.self, forKey: "personalProgramDetails")
        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        status = try container.decodeIfPresent(Status.self, forKey: "status")
        manager = try container.decodeIfPresent(ProfilePublic.self, forKey: "manager")
    }
}

