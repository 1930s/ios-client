//
// RatesModelRates.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class RatesModelRates: Codable {

    public var undefined: [RateItem]?
    public var GVT: [RateItem]?
    public var ETH: [RateItem]?
    public var BTC: [RateItem]?
    public var ADA: [RateItem]?
    public var USDT: [RateItem]?
    public var XRP: [RateItem]?
    public var BCH: [RateItem]?
    public var LTC: [RateItem]?
    public var DOGE: [RateItem]?
    public var BNB: [RateItem]?
    public var USD: [RateItem]?
    public var EUR: [RateItem]?


    
    public init(undefined: [RateItem]?, GVT: [RateItem]?, ETH: [RateItem]?, BTC: [RateItem]?, ADA: [RateItem]?, USDT: [RateItem]?, XRP: [RateItem]?, BCH: [RateItem]?, LTC: [RateItem]?, DOGE: [RateItem]?, BNB: [RateItem]?, USD: [RateItem]?, EUR: [RateItem]?) {
        self.undefined = undefined
        self.GVT = GVT
        self.ETH = ETH
        self.BTC = BTC
        self.ADA = ADA
        self.USDT = USDT
        self.XRP = XRP
        self.BCH = BCH
        self.LTC = LTC
        self.DOGE = DOGE
        self.BNB = BNB
        self.USD = USD
        self.EUR = EUR
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(undefined, forKey: "Undefined")
        try container.encodeIfPresent(GVT, forKey: "GVT")
        try container.encodeIfPresent(ETH, forKey: "ETH")
        try container.encodeIfPresent(BTC, forKey: "BTC")
        try container.encodeIfPresent(ADA, forKey: "ADA")
        try container.encodeIfPresent(USDT, forKey: "USDT")
        try container.encodeIfPresent(XRP, forKey: "XRP")
        try container.encodeIfPresent(BCH, forKey: "BCH")
        try container.encodeIfPresent(LTC, forKey: "LTC")
        try container.encodeIfPresent(DOGE, forKey: "DOGE")
        try container.encodeIfPresent(BNB, forKey: "BNB")
        try container.encodeIfPresent(USD, forKey: "USD")
        try container.encodeIfPresent(EUR, forKey: "EUR")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        undefined = try container.decodeIfPresent([RateItem].self, forKey: "Undefined")
        GVT = try container.decodeIfPresent([RateItem].self, forKey: "GVT")
        ETH = try container.decodeIfPresent([RateItem].self, forKey: "ETH")
        BTC = try container.decodeIfPresent([RateItem].self, forKey: "BTC")
        ADA = try container.decodeIfPresent([RateItem].self, forKey: "ADA")
        USDT = try container.decodeIfPresent([RateItem].self, forKey: "USDT")
        XRP = try container.decodeIfPresent([RateItem].self, forKey: "XRP")
        BCH = try container.decodeIfPresent([RateItem].self, forKey: "BCH")
        LTC = try container.decodeIfPresent([RateItem].self, forKey: "LTC")
        DOGE = try container.decodeIfPresent([RateItem].self, forKey: "DOGE")
        BNB = try container.decodeIfPresent([RateItem].self, forKey: "BNB")
        USD = try container.decodeIfPresent([RateItem].self, forKey: "USD")
        EUR = try container.decodeIfPresent([RateItem].self, forKey: "EUR")
    }
}

