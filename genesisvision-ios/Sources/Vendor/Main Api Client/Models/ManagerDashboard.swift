//
// ManagerDashboard.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ManagerDashboard: Codable {

    public var profile: ManagerProfileDetails?
    public var requests: ProgramRequest?
    public var events: ManagerPortfolioEvents?
    public var allAssets: [AssetSelection]?
    /** One of the charts will be null */
    public var programChart: ProgramProfitChart?
    public var fundChart: FundProfitChart?


    
    public init(profile: ManagerProfileDetails?, requests: ProgramRequest?, events: ManagerPortfolioEvents?, allAssets: [AssetSelection]?, programChart: ProgramProfitChart?, fundChart: FundProfitChart?) {
        self.profile = profile
        self.requests = requests
        self.events = events
        self.allAssets = allAssets
        self.programChart = programChart
        self.fundChart = fundChart
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(profile, forKey: "profile")
        try container.encodeIfPresent(requests, forKey: "requests")
        try container.encodeIfPresent(events, forKey: "events")
        try container.encodeIfPresent(allAssets, forKey: "allAssets")
        try container.encodeIfPresent(programChart, forKey: "programChart")
        try container.encodeIfPresent(fundChart, forKey: "fundChart")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        profile = try container.decodeIfPresent(ManagerProfileDetails.self, forKey: "profile")
        requests = try container.decodeIfPresent(ProgramRequest.self, forKey: "requests")
        events = try container.decodeIfPresent(ManagerPortfolioEvents.self, forKey: "events")
        allAssets = try container.decodeIfPresent([AssetSelection].self, forKey: "allAssets")
        programChart = try container.decodeIfPresent(ProgramProfitChart.self, forKey: "programChart")
        fundChart = try container.decodeIfPresent(FundProfitChart.self, forKey: "fundChart")
    }
}

