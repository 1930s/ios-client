//
// NewProgramRequest.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class NewProgramRequest: Codable {

    public enum Currency: String, Codable { 
        case eth = "ETH"
        case gvt = "GVT"
        case btc = "BTC"
        case undefined = "Undefined"
        case ada = "ADA"
        case usd = "USD"
        case eur = "EUR"
    }
    public var periodLength: Int?
    public var successFee: Double?
    public var stopOutLevel: Double?
    public var leverage: Int?
    public var title: String?
    public var description: String?
    public var logo: String?
    public var brokerAccountTypeId: UUID?
    public var entryFee: Double?
    public var currency: Currency?


    
    public init(periodLength: Int?, successFee: Double?, stopOutLevel: Double?, leverage: Int?, title: String?, description: String?, logo: String?, brokerAccountTypeId: UUID?, entryFee: Double?, currency: Currency?) {
        self.periodLength = periodLength
        self.successFee = successFee
        self.stopOutLevel = stopOutLevel
        self.leverage = leverage
        self.title = title
        self.description = description
        self.logo = logo
        self.brokerAccountTypeId = brokerAccountTypeId
        self.entryFee = entryFee
        self.currency = currency
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(periodLength, forKey: "periodLength")
        try container.encodeIfPresent(successFee, forKey: "successFee")
        try container.encodeIfPresent(stopOutLevel, forKey: "stopOutLevel")
        try container.encodeIfPresent(leverage, forKey: "leverage")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(brokerAccountTypeId, forKey: "brokerAccountTypeId")
        try container.encodeIfPresent(entryFee, forKey: "entryFee")
        try container.encodeIfPresent(currency, forKey: "currency")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        periodLength = try container.decodeIfPresent(Int.self, forKey: "periodLength")
        successFee = try container.decodeIfPresent(Double.self, forKey: "successFee")
        stopOutLevel = try container.decodeIfPresent(Double.self, forKey: "stopOutLevel")
        leverage = try container.decodeIfPresent(Int.self, forKey: "leverage")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        brokerAccountTypeId = try container.decodeIfPresent(UUID.self, forKey: "brokerAccountTypeId")
        entryFee = try container.decodeIfPresent(Double.self, forKey: "entryFee")
        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
    }
}

