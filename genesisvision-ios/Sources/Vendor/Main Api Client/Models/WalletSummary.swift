//
// WalletSummary.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class WalletSummary: Codable {

    public var totalBalanceGVT: Double?
    public var totalBalanceCurrency: Double?
    public var investedGVT: Double?
    public var investedCurrency: Double?
    public var availableGVT: Double?
    public var availableCurrency: Double?


    
    public init(totalBalanceGVT: Double?, totalBalanceCurrency: Double?, investedGVT: Double?, investedCurrency: Double?, availableGVT: Double?, availableCurrency: Double?) {
        self.totalBalanceGVT = totalBalanceGVT
        self.totalBalanceCurrency = totalBalanceCurrency
        self.investedGVT = investedGVT
        self.investedCurrency = investedCurrency
        self.availableGVT = availableGVT
        self.availableCurrency = availableCurrency
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(totalBalanceGVT, forKey: "totalBalanceGVT")
        try container.encodeIfPresent(totalBalanceCurrency, forKey: "totalBalanceCurrency")
        try container.encodeIfPresent(investedGVT, forKey: "investedGVT")
        try container.encodeIfPresent(investedCurrency, forKey: "investedCurrency")
        try container.encodeIfPresent(availableGVT, forKey: "availableGVT")
        try container.encodeIfPresent(availableCurrency, forKey: "availableCurrency")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        totalBalanceGVT = try container.decodeIfPresent(Double.self, forKey: "totalBalanceGVT")
        totalBalanceCurrency = try container.decodeIfPresent(Double.self, forKey: "totalBalanceCurrency")
        investedGVT = try container.decodeIfPresent(Double.self, forKey: "investedGVT")
        investedCurrency = try container.decodeIfPresent(Double.self, forKey: "investedCurrency")
        availableGVT = try container.decodeIfPresent(Double.self, forKey: "availableGVT")
        availableCurrency = try container.decodeIfPresent(Double.self, forKey: "availableCurrency")
    }
}

