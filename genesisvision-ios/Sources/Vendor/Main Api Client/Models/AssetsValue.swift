//
// AssetsValue.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class AssetsValue: Codable {

    public enum ModelType: String, Codable { 
        case all = "All"
        case program = "Program"
        case fund = "Fund"
    }
    public var type: ModelType?
    public var id: UUID?
    public var title: String?
    public var avatar: String?
    public var value: Double?
    public var changePercent: Double?
    public var changeValue: Double?


    
    public init(type: ModelType?, id: UUID?, title: String?, avatar: String?, value: Double?, changePercent: Double?, changeValue: Double?) {
        self.type = type
        self.id = id
        self.title = title
        self.avatar = avatar
        self.value = value
        self.changePercent = changePercent
        self.changeValue = changeValue
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(avatar, forKey: "avatar")
        try container.encodeIfPresent(value, forKey: "value")
        try container.encodeIfPresent(changePercent, forKey: "changePercent")
        try container.encodeIfPresent(changeValue, forKey: "changeValue")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        type = try container.decodeIfPresent(ModelType.self, forKey: "type")
        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        avatar = try container.decodeIfPresent(String.self, forKey: "avatar")
        value = try container.decodeIfPresent(Double.self, forKey: "value")
        changePercent = try container.decodeIfPresent(Double.self, forKey: "changePercent")
        changeValue = try container.decodeIfPresent(Double.self, forKey: "changeValue")
    }
}

