//
// ProgramProfitChart.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProgramProfitChart: Codable {

    public enum ProgramCurrency: String, Codable { 
        case eth = "ETH"
        case gvt = "GVT"
        case btc = "BTC"
        case undefined = "Undefined"
        case ada = "ADA"
        case usd = "USD"
        case eur = "EUR"
    }
    public var totalProgramCurrencyProfit: Double?
    public var timeframeProgramCurrencyProfit: Double?
    public var programCurrency: ProgramCurrency?
    public var trades: Int?
    public var successTradesPercent: Double?
    public var profitFactor: Double?
    public var maxDrawdown: Double?
    public var chart: [ChartProgramDetails]?
    public var pnLChart: [ChartSimple]?
    public var equity: Double?
    public var sharpeRatio: Double?
    public var sortinoRatio: Double?
    public var calmarRatio: Double?
    public var totalGvtProfit: Double?
    public var timeframeGvtProfit: Double?
    public var profitChangePercent: Double?


    
    public init(totalProgramCurrencyProfit: Double?, timeframeProgramCurrencyProfit: Double?, programCurrency: ProgramCurrency?, trades: Int?, successTradesPercent: Double?, profitFactor: Double?, maxDrawdown: Double?, chart: [ChartProgramDetails]?, pnLChart: [ChartSimple]?, equity: Double?, sharpeRatio: Double?, sortinoRatio: Double?, calmarRatio: Double?, totalGvtProfit: Double?, timeframeGvtProfit: Double?, profitChangePercent: Double?) {
        self.totalProgramCurrencyProfit = totalProgramCurrencyProfit
        self.timeframeProgramCurrencyProfit = timeframeProgramCurrencyProfit
        self.programCurrency = programCurrency
        self.trades = trades
        self.successTradesPercent = successTradesPercent
        self.profitFactor = profitFactor
        self.maxDrawdown = maxDrawdown
        self.chart = chart
        self.pnLChart = pnLChart
        self.equity = equity
        self.sharpeRatio = sharpeRatio
        self.sortinoRatio = sortinoRatio
        self.calmarRatio = calmarRatio
        self.totalGvtProfit = totalGvtProfit
        self.timeframeGvtProfit = timeframeGvtProfit
        self.profitChangePercent = profitChangePercent
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(totalProgramCurrencyProfit, forKey: "totalProgramCurrencyProfit")
        try container.encodeIfPresent(timeframeProgramCurrencyProfit, forKey: "timeframeProgramCurrencyProfit")
        try container.encodeIfPresent(programCurrency, forKey: "programCurrency")
        try container.encodeIfPresent(trades, forKey: "trades")
        try container.encodeIfPresent(successTradesPercent, forKey: "successTradesPercent")
        try container.encodeIfPresent(profitFactor, forKey: "profitFactor")
        try container.encodeIfPresent(maxDrawdown, forKey: "maxDrawdown")
        try container.encodeIfPresent(chart, forKey: "chart")
        try container.encodeIfPresent(pnLChart, forKey: "pnLChart")
        try container.encodeIfPresent(equity, forKey: "equity")
        try container.encodeIfPresent(sharpeRatio, forKey: "sharpeRatio")
        try container.encodeIfPresent(sortinoRatio, forKey: "sortinoRatio")
        try container.encodeIfPresent(calmarRatio, forKey: "calmarRatio")
        try container.encodeIfPresent(totalGvtProfit, forKey: "totalGvtProfit")
        try container.encodeIfPresent(timeframeGvtProfit, forKey: "timeframeGvtProfit")
        try container.encodeIfPresent(profitChangePercent, forKey: "profitChangePercent")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        totalProgramCurrencyProfit = try container.decodeIfPresent(Double.self, forKey: "totalProgramCurrencyProfit")
        timeframeProgramCurrencyProfit = try container.decodeIfPresent(Double.self, forKey: "timeframeProgramCurrencyProfit")
        programCurrency = try container.decodeIfPresent(ProgramCurrency.self, forKey: "programCurrency")
        trades = try container.decodeIfPresent(Int.self, forKey: "trades")
        successTradesPercent = try container.decodeIfPresent(Double.self, forKey: "successTradesPercent")
        profitFactor = try container.decodeIfPresent(Double.self, forKey: "profitFactor")
        maxDrawdown = try container.decodeIfPresent(Double.self, forKey: "maxDrawdown")
        chart = try container.decodeIfPresent([ChartProgramDetails].self, forKey: "chart")
        pnLChart = try container.decodeIfPresent([ChartSimple].self, forKey: "pnLChart")
        equity = try container.decodeIfPresent(Double.self, forKey: "equity")
        sharpeRatio = try container.decodeIfPresent(Double.self, forKey: "sharpeRatio")
        sortinoRatio = try container.decodeIfPresent(Double.self, forKey: "sortinoRatio")
        calmarRatio = try container.decodeIfPresent(Double.self, forKey: "calmarRatio")
        totalGvtProfit = try container.decodeIfPresent(Double.self, forKey: "totalGvtProfit")
        timeframeGvtProfit = try container.decodeIfPresent(Double.self, forKey: "timeframeGvtProfit")
        profitChangePercent = try container.decodeIfPresent(Double.self, forKey: "profitChangePercent")
    }
}

