//
// ProgramDetailsListStatistic.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ProgramDetailsListStatistic: Codable {

    public var balanceBase: AmountWithCurrency?
    public var balanceGVT: AmountWithCurrency?
    public var balanceSecondary: AmountWithCurrency?
    public var currentValue: Double?
    public var profitPercent: Double?
    public var profitValue: Double?
    public var drawdownPercent: Double?
    public var investorsCount: Int?
    public var tradesCount: Int?


    
    public init(balanceBase: AmountWithCurrency?, balanceGVT: AmountWithCurrency?, balanceSecondary: AmountWithCurrency?, currentValue: Double?, profitPercent: Double?, profitValue: Double?, drawdownPercent: Double?, investorsCount: Int?, tradesCount: Int?) {
        self.balanceBase = balanceBase
        self.balanceGVT = balanceGVT
        self.balanceSecondary = balanceSecondary
        self.currentValue = currentValue
        self.profitPercent = profitPercent
        self.profitValue = profitValue
        self.drawdownPercent = drawdownPercent
        self.investorsCount = investorsCount
        self.tradesCount = tradesCount
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(balanceBase, forKey: "balanceBase")
        try container.encodeIfPresent(balanceGVT, forKey: "balanceGVT")
        try container.encodeIfPresent(balanceSecondary, forKey: "balanceSecondary")
        try container.encodeIfPresent(currentValue, forKey: "currentValue")
        try container.encodeIfPresent(profitPercent, forKey: "profitPercent")
        try container.encodeIfPresent(profitValue, forKey: "profitValue")
        try container.encodeIfPresent(drawdownPercent, forKey: "drawdownPercent")
        try container.encodeIfPresent(investorsCount, forKey: "investorsCount")
        try container.encodeIfPresent(tradesCount, forKey: "tradesCount")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        balanceBase = try container.decodeIfPresent(AmountWithCurrency.self, forKey: "balanceBase")
        balanceGVT = try container.decodeIfPresent(AmountWithCurrency.self, forKey: "balanceGVT")
        balanceSecondary = try container.decodeIfPresent(AmountWithCurrency.self, forKey: "balanceSecondary")
        currentValue = try container.decodeIfPresent(Double.self, forKey: "currentValue")
        profitPercent = try container.decodeIfPresent(Double.self, forKey: "profitPercent")
        profitValue = try container.decodeIfPresent(Double.self, forKey: "profitValue")
        drawdownPercent = try container.decodeIfPresent(Double.self, forKey: "drawdownPercent")
        investorsCount = try container.decodeIfPresent(Int.self, forKey: "investorsCount")
        tradesCount = try container.decodeIfPresent(Int.self, forKey: "tradesCount")
    }
}

