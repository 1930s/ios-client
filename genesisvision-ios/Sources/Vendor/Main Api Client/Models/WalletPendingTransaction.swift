//
// WalletPendingTransaction.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class WalletPendingTransaction: Codable {

    public enum Currency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usdt = "USDT"
        case xrp = "XRP"
        case bch = "BCH"
        case ltc = "LTC"
        case doge = "DOGE"
        case usd = "USD"
        case eur = "EUR"
    }
    public enum ModelType: String, Codable { 
        case deposit = "Deposit"
        case withdrawn = "Withdrawn"
    }
    public var id: UUID?
    public var hash: String?
    public var amount: Double?
    public var currency: Currency?
    public var type: ModelType?
    public var dateCreated: Date?
    public var lastUpdated: Date?
    public var address: String?


    
    public init(id: UUID?, hash: String?, amount: Double?, currency: Currency?, type: ModelType?, dateCreated: Date?, lastUpdated: Date?, address: String?) {
        self.id = id
        self.hash = hash
        self.amount = amount
        self.currency = currency
        self.type = type
        self.dateCreated = dateCreated
        self.lastUpdated = lastUpdated
        self.address = address
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(hash, forKey: "hash")
        try container.encodeIfPresent(amount, forKey: "amount")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(type, forKey: "type")
        try container.encodeIfPresent(dateCreated, forKey: "dateCreated")
        try container.encodeIfPresent(lastUpdated, forKey: "lastUpdated")
        try container.encodeIfPresent(address, forKey: "address")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        hash = try container.decodeIfPresent(String.self, forKey: "hash")
        amount = try container.decodeIfPresent(Double.self, forKey: "amount")
        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
        type = try container.decodeIfPresent(ModelType.self, forKey: "type")
        dateCreated = try container.decodeIfPresent(Date.self, forKey: "dateCreated")
        lastUpdated = try container.decodeIfPresent(Date.self, forKey: "lastUpdated")
        address = try container.decodeIfPresent(String.self, forKey: "address")
    }
}

