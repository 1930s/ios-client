//
// InvestmentProgramBuyToken.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class InvestmentProgramBuyToken: Codable {

    public enum Currency: String, Codable { 
        case undefined = "Undefined"
        case gvt = "GVT"
        case eth = "ETH"
        case btc = "BTC"
        case ada = "ADA"
        case usd = "USD"
        case eur = "EUR"
    }
    public var id: UUID?
    public var logo: String?
    public var description: String?
    public var manager: ProfilePublicViewModel?
    public var level: Int?
    public var title: String?
    public var startOfPeriod: Date?
    public var endOfPeriod: Date?
    public var gvtRate: Double?
    public var gvtWalletAmount: Double?
    public var periodDuration: Int?
    public var currency: Currency?
    public var availableInvestments: Double?
    public var rateCacheId: UUID?
    public var managerFee: Double?
    public var gvFee: Double?


    
    public init(id: UUID?, logo: String?, description: String?, manager: ProfilePublicViewModel?, level: Int?, title: String?, startOfPeriod: Date?, endOfPeriod: Date?, gvtRate: Double?, gvtWalletAmount: Double?, periodDuration: Int?, currency: Currency?, availableInvestments: Double?, rateCacheId: UUID?, managerFee: Double?, gvFee: Double?) {
        self.id = id
        self.logo = logo
        self.description = description
        self.manager = manager
        self.level = level
        self.title = title
        self.startOfPeriod = startOfPeriod
        self.endOfPeriod = endOfPeriod
        self.gvtRate = gvtRate
        self.gvtWalletAmount = gvtWalletAmount
        self.periodDuration = periodDuration
        self.currency = currency
        self.availableInvestments = availableInvestments
        self.rateCacheId = rateCacheId
        self.managerFee = managerFee
        self.gvFee = gvFee
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(description, forKey: "description")
        try container.encodeIfPresent(manager, forKey: "manager")
        try container.encodeIfPresent(level, forKey: "level")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(startOfPeriod, forKey: "startOfPeriod")
        try container.encodeIfPresent(endOfPeriod, forKey: "endOfPeriod")
        try container.encodeIfPresent(gvtRate, forKey: "gvtRate")
        try container.encodeIfPresent(gvtWalletAmount, forKey: "gvtWalletAmount")
        try container.encodeIfPresent(periodDuration, forKey: "periodDuration")
        try container.encodeIfPresent(currency, forKey: "currency")
        try container.encodeIfPresent(availableInvestments, forKey: "availableInvestments")
        try container.encodeIfPresent(rateCacheId, forKey: "rateCacheId")
        try container.encodeIfPresent(managerFee, forKey: "managerFee")
        try container.encodeIfPresent(gvFee, forKey: "gvFee")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        description = try container.decodeIfPresent(String.self, forKey: "description")
        manager = try container.decodeIfPresent(ProfilePublicViewModel.self, forKey: "manager")
        level = try container.decodeIfPresent(Int.self, forKey: "level")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        startOfPeriod = try container.decodeIfPresent(Date.self, forKey: "startOfPeriod")
        endOfPeriod = try container.decodeIfPresent(Date.self, forKey: "endOfPeriod")
        gvtRate = try container.decodeIfPresent(Double.self, forKey: "gvtRate")
        gvtWalletAmount = try container.decodeIfPresent(Double.self, forKey: "gvtWalletAmount")
        periodDuration = try container.decodeIfPresent(Int.self, forKey: "periodDuration")
        currency = try container.decodeIfPresent(Currency.self, forKey: "currency")
        availableInvestments = try container.decodeIfPresent(Double.self, forKey: "availableInvestments")
        rateCacheId = try container.decodeIfPresent(UUID.self, forKey: "rateCacheId")
        managerFee = try container.decodeIfPresent(Double.self, forKey: "managerFee")
        gvFee = try container.decodeIfPresent(Double.self, forKey: "gvFee")
    }
}

