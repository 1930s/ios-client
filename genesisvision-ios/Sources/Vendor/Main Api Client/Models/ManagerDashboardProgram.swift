//
// ManagerDashboardProgram.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation



open class ManagerDashboardProgram: Codable {

    public var level: Int?
    public var periodStarts: Date?
    public var periodEnds: Date?
    public var id: UUID?
    public var logo: String?
    public var url: String?
    public var title: String?
    public var share: Double?
    public var investments: Double?
    public var investmentsCount: Int?
    public var withdrawals: Double?
    public var withdrawalsCount: Int?
    public var balance: Double?
    public var investorsCount: Int?
    public var profit: Double?
    public var chart: [ChartSimple]?


    
    public init(level: Int?, periodStarts: Date?, periodEnds: Date?, id: UUID?, logo: String?, url: String?, title: String?, share: Double?, investments: Double?, investmentsCount: Int?, withdrawals: Double?, withdrawalsCount: Int?, balance: Double?, investorsCount: Int?, profit: Double?, chart: [ChartSimple]?) {
        self.level = level
        self.periodStarts = periodStarts
        self.periodEnds = periodEnds
        self.id = id
        self.logo = logo
        self.url = url
        self.title = title
        self.share = share
        self.investments = investments
        self.investmentsCount = investmentsCount
        self.withdrawals = withdrawals
        self.withdrawalsCount = withdrawalsCount
        self.balance = balance
        self.investorsCount = investorsCount
        self.profit = profit
        self.chart = chart
    }
    

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {

        var container = encoder.container(keyedBy: String.self)

        try container.encodeIfPresent(level, forKey: "level")
        try container.encodeIfPresent(periodStarts, forKey: "periodStarts")
        try container.encodeIfPresent(periodEnds, forKey: "periodEnds")
        try container.encodeIfPresent(id, forKey: "id")
        try container.encodeIfPresent(logo, forKey: "logo")
        try container.encodeIfPresent(url, forKey: "url")
        try container.encodeIfPresent(title, forKey: "title")
        try container.encodeIfPresent(share, forKey: "share")
        try container.encodeIfPresent(investments, forKey: "investments")
        try container.encodeIfPresent(investmentsCount, forKey: "investmentsCount")
        try container.encodeIfPresent(withdrawals, forKey: "withdrawals")
        try container.encodeIfPresent(withdrawalsCount, forKey: "withdrawalsCount")
        try container.encodeIfPresent(balance, forKey: "balance")
        try container.encodeIfPresent(investorsCount, forKey: "investorsCount")
        try container.encodeIfPresent(profit, forKey: "profit")
        try container.encodeIfPresent(chart, forKey: "chart")
    }

    // Decodable protocol methods

    public required init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: String.self)

        level = try container.decodeIfPresent(Int.self, forKey: "level")
        periodStarts = try container.decodeIfPresent(Date.self, forKey: "periodStarts")
        periodEnds = try container.decodeIfPresent(Date.self, forKey: "periodEnds")
        id = try container.decodeIfPresent(UUID.self, forKey: "id")
        logo = try container.decodeIfPresent(String.self, forKey: "logo")
        url = try container.decodeIfPresent(String.self, forKey: "url")
        title = try container.decodeIfPresent(String.self, forKey: "title")
        share = try container.decodeIfPresent(Double.self, forKey: "share")
        investments = try container.decodeIfPresent(Double.self, forKey: "investments")
        investmentsCount = try container.decodeIfPresent(Int.self, forKey: "investmentsCount")
        withdrawals = try container.decodeIfPresent(Double.self, forKey: "withdrawals")
        withdrawalsCount = try container.decodeIfPresent(Int.self, forKey: "withdrawalsCount")
        balance = try container.decodeIfPresent(Double.self, forKey: "balance")
        investorsCount = try container.decodeIfPresent(Int.self, forKey: "investorsCount")
        profit = try container.decodeIfPresent(Double.self, forKey: "profit")
        chart = try container.decodeIfPresent([ChartSimple].self, forKey: "chart")
    }
}

